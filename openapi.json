{
  "openapi": "3.0.0",
  "info": {
    "version": "2021.08.03",
    "title": "Angelcam API",
    "contact": {
      "email": "support@angelcam.com"
    },
    "x-logo": {
      "url": "./assets/logo-angelcam.svg"
    },
    "description": "\n# Angelcam API\n\n> If you have any questions please feel free to contact our [support team](https://www.angelcam.com/support/).\n\nWelcome! \n\nThis document will help guide you through how to use Angelcam’s RESTful API. You’ll find that the\nRESTful API is not difficult to use, but it requires some understanding of certain concepts behind Angelcam services.\n## Quickstart guide\n1. [Go to My Angelcam](https://my.angelcam.com/dashboard/personal-token/) and generate Personal Access Token with scope `user_access`\n\n2. Perform your first successful API request:\n\n\n    curl -H \"Authorization: PersonalAccessToken <Your Token>\" -X GET \"https://api.angelcam.com/v1/me/\"\n\n\n3. Congrats! You've just successfully retrieved info about your user account.\n\n## Nuts and bolts\n\n### HTTPS\nAll API calls have to be made over HTTPS. Calls made over plain HTTP will fail.\n\n### Plain JSON\n\nThe RESTful API runs over HTTP/1.1 and communicates using plain `application/json`.\n\n### Trailing /\n\nLastly, please keep in mind that all endpoint URLs require a trailing slash (`/`). For example,\n`cameras/282929/recording`, will result in a \"404 Not Found\". The correct URL in this case, with a trailing slash, is\n`cameras/282929/recording/`.\n\n### Caching\n\nThe API doesn't include any additional caching features, besides what is implied by the protocol layer.\n\n### Rate limiting\nSome endpoints have rate limiting in place to protect our service from excessive amounts of requests. If you reach the limit, the server will respond with HTTP 429 and the `Retry-After` HTTP header will be set to the number of seconds that your client needs to wait before retrying the request.\n### Resource Embedding and Field Fetching\n\nThis API doesn't support the embedding of related resources, nor client-driven field fetching.\n\n## Pagination\n\nSome endpoints, like `cameras/`, employ pagination with the use of the `limit` and `offset` parameters. Each paginated\nendpoint response has these fields:\n\n- `count` - total number of items\n- `next` - is link to next page of paginated result, can be null if reached end of set\n- `previous` - is link to previous set of paginated result, can be null if `offset` is 0\n- `results` - current paginated set\n\nWe recommend you always explicitly set the `limit` parameter to ensure you know how many results, per page, you'll get.\nIf you omit `limit`, the page will contain 100 items, at most.\n\n### Setting the limit parameter\n\nLet’s say you need to request all the cameras of the user, but only want 5 results at a time. Your `GET` would look\nsomething like this:\n\n    $ curl -H \"Authorization: Bearer \" -X GET \"https://api.angelcam.com/v1/cameras/?limit=5\"\n\nNote the `limit` parameter in this call is set to 5, so the response shows items 0 through 4.\n\n### GET the next page of results\n\nNext, let’s say you want to make a call to return the next page from the previous example. As you’ll see below, the\n`offset` parameter in the following sample link is 5, so the next page of results will show items 5 through 9:\n\n    $ curl -H \"Authorization: Bearer \" -X GET \"https://api.angelcam.com/v1/cameras/?limit=5&offset=5\"\n\n### How do I know if there are more pages?\n\nWhen the response contain null value of `next`, you know that you've reached the end.\n\n## Time and duration formats\n\n### Time and date formats\n\nWhenever you need to specify or have the API send you a date and time, it will be in the ISO 8601\n_YYYY-MM-DDTHH:MM:SSZ_ format (i.e. 2016-03-19T13:15:32Z) where:\n\n* YYYY is the year (i.e. 2016), MM is the month (i.e. 03), and DD is the day of the month (i.e. 19)\n* T is the delimiter between the date and time\n* HH is the hour, in 24-hour format (i.e. 1PM is 13), MM is the minute (i.e. 15), and SS is the seconds (i.e. 32)\n* Z indicates the UTC (GMT 0) timezone\n\nAll times from the API have both a date and time. You must pass a time part in all inputs, even if it's 00:00:00.\n\nAll times from the API are in UTC. Similarly, all time inputs are expected in a UTC timezone.\n\n### Duration format\n\nSome parts of the API, like the retention field in `cameras/{camera_id}/` and `cameras/`, use duration to denote a\nspan of time (i.e. \"30 days\" or \"2 months\"). We use the standard ISO 8601 duration format which uses the\n_P[n]Y[n]M[n]DT[n]H[n]M[n]S_ format. Here are a few examples of various durations:\n\n* PT30S - 30 seconds\n* PT2M - 2 minutes\n* P30D - 30 days\n* P2M - 2 months\n* P2M10D - 2 months and 10 days\n* P3Y6M4DT12H30M5S - 3 years, 6 months, 4 days, 12 hours, 30 minutes, and 5 seconds\n\n\n# Authentication\nAll API requests have to be authenticated. Angelcam API supports two types of authentication:\n- [OAuth2](/#section/Authentication/OAuth2)\n- [Personal Access Token](/#section/Authentication/PersonalAccessToken)\n"
  },
  "tags": [
    {
      "name": "user",
      "x-displayName": "User"
    },
    {
      "name": "camera",
      "x-displayName": "My cameras",
      "description": "\nWith the `/v1/cameras/` endpoint, you can obtain a paginated list of cameras for the current user. Alternatively, if you know an ID of a camera, you can get the same information using the `/v1/cameras/{camera_id}/` endpoint. In both cases, you'll get important information about the camera:\n\n* camera ID, name and type\n* snapshot (thumbnail of recent camera content)\n* status (online, offline, unknown, ...)\n* list of live stream URLs in various formats to watch\n\n## Camera type\n\nAngelcam platform supports cameras with H.264 or MJPEG video codec. While many cameras support both formats, you need to choose which one to use to connect your camera to Angelcam. This is indicated by the \"type\" property of the camera resource.\n\n## Live stream\n\n**Important:** The live stream feature is intended for private live video monitoring acessible only by the camera owner. The amount of stream consumers per camera is limited to 10 concurrent consumers. Angelcam web app and Angelcam mobile app also count to this limit. Recording is excluded. If you need to broadcast the video to general public or you simply need more concurrent stream consumers, use the [broadcasting service](https://www.angelcam.com/apps/camera-broadcasting). The broadcasting service can be also consumed via API.\n\nA live stream from a camera can be retrieved from Angelcam CDN. For MJPEG cameras, you can obtain only an MJPEG live stream. For H.264 cameras, you can choose from multiple stream formats:\n\n * MJPEG (a stream consisting of key-frames transcoded to MJPEG)\n * HLS\n * fMP4\n * MPEG-TS (experimental)\n\nEach format has different characteristics making it suitable for certain usecases.\n\n### MJPEG\n\n[MJPEG](https://en.wikipedia.org/wiki/Motion_JPEG) (or Motion JPEG) is a stream of images in JPEG format. It does not contain audio track and it may require higher bandwidth than H.264 encoded video. On the other hand, you can easily embed it into an HTML page using the img tag and most modern browsers will just play it out of the box (please note that Internet Explorer does not support MJPEG). Playing MJPEG requires less CPU time, so it's the prefered format if you need to display streams from more cameras on a single page. Another advantage is that you can specify the maximum frame rate of the stream (e.g. only one frame per 10 seconds) to save the bandwidth.\n\n### HLS\n\n[HLS](https://en.wikipedia.org/wiki/HTTP_Live_Streaming) (or HTTP Live Streaming) is an HTTP-based protocol designed by Apple and supported by majority of video players and web browsers. It is the preferred video format for most use cases. Angelcam CDN provides the video as it is generated by the camera, so the properties such as bitrate or image quality can vary depending on the camera settings and the encoder implementation. Please note that playback of H.264 video is resource intensive and playing multiple streams at once can cause signicant load to the viewer's system.\n\n### fMP4\n\n[fMP4](https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-3.3) (or Fragmented MP4) is a video format provided by Angelcam CDN for use cases requiring low latency between the live stream and real time. The format is not as widely supported as HLS, though many modern web browsers support it. Mobile devices might have problems with this format.\n\n### MPEG-TS (experimental)\n\n[MPEG-TS](https://en.wikipedia.org/wiki/MPEG_transport_stream) is provided for the same purpose as fragmented MP4 because it offers similar latency. It may help in situations when the fragmented MP4 cannot be used.\n\n## Snapshot\n\nA snapshot is an affordable and a quick way to give your users a sample of their on-going live stream, by periodically saving a picture of it. It's intended to give a preview of the camera's content without actually creating a connection to the camera, which can be a resource-expensive operation.\n\nPlease note, a snapshot may be up to 24 hours old but we'll automatically initiate a refresh whenever you access camera endpoints in the API. If the snapshot age is important to you, check the `created_at` field in the snapshots array returned by the `/v1/cameras/{camera_id}/` and the `/v1/cameras/` endpoints.\n\nIn cases when a more recent image is required, you can use a live snapshot or the MJPEG stream with a low frame rate instead.\n\n## Live snapshot\n\nThe live snapshot is a static picture of what the camera is currently shooting at the moment. This actually creates a connection to the camera and extracts the last key-frame from the camera stream.\n"
    },
    {
      "name": "shared-camera",
      "x-displayName": "Shared cameras",
      "description": "For access to cameras which somebody shared with you. In general everything is same as in my cameras section, see above, there is only one difference. Together with cameras information you get also a camera's public page url\n"
    },
    {
      "name": "camera-guest",
      "x-displayName": "Manage camera guests",
      "description": "You can share your camera with a guest, this means, you allow guests to view stream from your camera. There is also an option to share also recordings together with live stream.\n\nWhen you adding new guest, you just need their email. Then we send them an email informing them that you share camera with them. In case when there was no account with given email we precreate an account for these guest.\n"
    },
    {
      "name": "recording",
      "x-displayName": "My cameras recording",
      "description": "\n![Recording sequence diagram](./assets/recording_sequence.png)\n\nThe Cloud Recording application (CRA) safely stores any content captured by your camera to the cloud. If a camera\ndoesn't have the CRA application, all camera recording endpoints will return 404. Otherwise, you can start by asking general\nrecording information using the `cameras/{camera_id}/recording/` endpoint.\n\nMost notably, this endpoint tells you whether the camera is currently recording or not (i.e. recording might not have\nbeen started by the user yet, there’s an error, etc.). As with all \"active\" operations, the user must use our web\napplication to start a recording.\n\nAnother piece of information reported by this endpoint is the retention period, which dictates how long a video will be\nstored. This is particularly useful for obtaining a `cameras/{camera_id}/recording/timeline/`.\n\n## Timeline and segments\n\nIt's important to note that in the Angelcam API there are some terms that sound similar but have different meanings:\n\n* _record_ (noun) - a continuous block of video content, as stored by the recording. To clearly distinguish it from a\n  “recording” we called it a _record segment_ or simply, _segment_.\n* _recording_ (verb) - the process of capturing a record, or records, which are then stored.\n\nTimeline listening at the `cameras/{camera_id}/recording/timeline/` endpoint is a collection of record segments for a\ngiven camera and time interval. In  order to save bandwidth and resources, the maximum length of timeline you can\nrequest, per single call, is 24 hours.\n\nIf a recording was running uninterrupted, within a specified start and end time, the result will contain one segment.\nOften \"missing\" slots will appear on the timeline, usually because the user may have manually stopped the recording or\nthere were some camera errors.\n\n## Recording stream\n\nIf you know which video segment(s) from the timeline you want to play, calling `cameras/{camera_id}/recording/stream/`\nwill create a stream from that specified segment(s) and tells you its URL and format.\n\nUsing `start` and `end` query parameters, you can specify a beginning and ending time of the stream. You can even omit\nthe `end` parameter and the stream will play until the very end of the recorded footage or, if the camera is currently\nrecording, the stream will continue uninterrupted.\n\nAmong other things, the endpoint tells you the URL of `recording/stream/{streamer_name}/{stream_id}/` with the stream's\nadditional details.\n\n## Syncing stream and timeline\n\nDue to various reasons, the time a user spends watching a stream doesn't necessarily have to match the time actually\nelapsed in the recorded video (i.e. a 5-minute long stream takes 6 minutes to watch on a user's slow mobile network\nconnection due to lag).\n\nPeriodically calling endpoint, `recording/stream/{streamer_name}/{stream_id}/`, comes in handy in this case, because it\nsynchronizes the time shown to the user in your UI, with the current time of the stream. This endpoint tells you the\nexact time where the stream is positioned at the current moment. You normally don't have to know the `streamer_name`\nand `streamer_id` path parameters, but use the generated endpoint URL as reported by `stream_info` field from\n`cameras/{camera_id}/recording/stream/`.\n"
    },
    {
      "name": "shared-camera-recording",
      "x-displayName": "Shared cameras recording",
      "description": "Everything is same as in recording for my own cameras. Just replace `cameras` by `shared-cameras` in every endpoints url.\n"
    },
    {
      "name": "clip",
      "x-displayName": "My recording clips",
      "description": "Recording clips on my cameras."
    },
    {
      "name": "shared-camera-clip",
      "x-displayName": "Shared recording clips",
      "description": "Recording clips on shared cameras."
    },
    {
      "name": "event",
      "x-displayName": "Events",
      "description": "There is one difference in pagination for events list endpoints compared to other list endpoints:\n There is no offset option available. This limitation has several consequences:\n  - Pagination can be done only using link in `next` attribute that is part of response\n  - Pagination is possible only in one direction (it is not possible to go to previous page)\n\nHowever there are filters for `start` and `end` that may be used as an alternative or complement for pagination. Retrieved events list is ordered by occurred at datetime (newest first).\n"
    },
    {
      "name": "sensor",
      "x-displayName": "My sensors",
      "description": "With sensor endpoints you can view, manage and connect sensors to the user account.\n\nSensor can be bind to one particular already connected [camera](#tag/camera) to mark received [events](#tag/event) on camera timeline. If camera that sensor is bind to has active [Cloud Recording](#tag/recording) event recording can be enabled using these endpoints. Event recording will not be applied in the case that the camera assigned to the sensor doesn't have Cloud Recording activated.\n\nTo specify event recording length [duration](#section/Angelcam-API/Time-and-duration-formats) format must be used and currently options for recording length are limited to:\n  - 30 seconds\n  - 1 minute\n  - 2 minutes\n  - 5 minutes\n\nEach sensor is given a unique email and unique hash. Those can be used to send [events](#tag/event) to Angelcam. \n"
    },
    {
      "name": "client",
      "x-displayName": "Clients",
      "description": "This part of API makes sense only for reseller users. It provides them a way to manage their clients.\n"
    },
    {
      "name": "camera-stream-detection",
      "x-displayName": "Camera streams detection",
      "description": "Using these endpoints you can verify if there are camera streams available on specified network address. Detection is asynchronous. For this reason there is one endpoint for initializing stream detection and one for retrieving result of detection."
    },
    {
      "name": "arrow-clients",
      "x-displayName": "Arrow clients",
      "description": "Endpoints for managing Arrow clients. Arrow client is an application that powers all Angelcam ready devices such as AngelBoxes, Angelcam ready cameras, etc. You can use these endpoints to pair Arrow clients with a specific user account, to get some useful information about the clients and the services they provide, and to give commands to the clients. Before you are allowed to access an Arrow client, you need to pair it with your user account.\n\n## Pairing an Arrow client\nIn order to pair an Arrow client with the current user account, you need to:\n1. Make sure that the Arrow client is in pairing mode. An Arrow client is in pairing mode only the first 20 minutes after it's started, so you probably need to restart the device with the Arrow client before you initiate the pairing process.\n2. Initiate the pairing process by sending a POST request to the [`arrow-clients/`](#operation/arrow-client-pairing-request) endpoint. The API will respond with Arrow client UUID.\n3. Wait until the Arrow client connects to the Angelcam cloud. You can use the returned UUID to poll the [`arrow-clients/{uuid}/`](#operation/arrow-client-detail) endpoint until the API responds with `online` status.\n"
    },
    {
      "name": "site",
      "x-displayName": "Sites",
      "description": "Endpoints for accessing and managing sites. Sites are hiearchical structure that can be used to organize cameras. Any camera is assigned exactly to one site. Each user has a root site. ID of root site can be obtained from [Current User Info Endpoint](#tag/user).\n\n  Site can be armed or disarmed. If site is in armed state user will be notified when some event occurs on given site. \n  \n  If site is armed or disarmed all its descendants are also (dis)armed.\n  \n  Camera can be moved from site to site using [Camera Endpoints](#tag/camera)\n"
    },
    {
      "name": "broadcasting",
      "x-displayName": "My cameras broadcasting",
      "description": "Endpoints for managing broadcasting settings and retrieving broadcasting streams. If a camera doesn't have the Broadcasting service activated, all camera broadcasting endpoints will return HTTP 404.\n\nThe broadcasting service can be used whenever you need more concurrent stream consumers. It does not necessarily mean that the stream from your camera has to be public.\n"
    },
    {
      "name": "public-camera",
      "x-displayName": "Public cameras",
      "description": "These endpoints allow to obtain information about all cameras that are connected to Angelcam with free public broadcasting enabled.\n"
    },
    {
      "name": "service",
      "x-displayName": "Available services"
    },
    {
      "name": "active-service",
      "x-displayName": "My services"
    },
    {
      "name": "order",
      "x-displayName": "My Orders"
    },
    {
      "name": "rts_messages",
      "x-displayName": "Messages"
    },
    {
      "name": "rts_settings",
      "x-displayName": "Settings"
    }
  ],
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "user",
        "client-device"
      ]
    },
    {
      "name": "Camera management",
      "tags": [
        "camera",
        "shared-camera",
        "camera-guest",
        "camera-stream-detection",
        "arrow-clients"
      ]
    },
    {
      "name": "Sensor management",
      "tags": [
        "sensor"
      ]
    },
    {
      "name": "Recording",
      "tags": [
        "recording",
        "shared-camera-recording",
        "clip",
        "shared-camera-clip"
      ]
    },
    {
      "name": "Broadcasting",
      "tags": [
        "broadcasting",
        "public-camera"
      ]
    },
    {
      "name": "Events",
      "tags": [
        "event"
      ]
    },
    {
      "name": "Clients management",
      "tags": [
        "client"
      ]
    },
    {
      "name": "RTS",
      "tags": [
        "rts_messages",
        "rts_settings"
      ]
    }
  ],
  "servers": [
    {
      "url": "https://api.angelcam.com/v1"
    }
  ],
  "paths": {
    "/arrow-clients/": {
      "get": {
        "operationId": "arrow-clients-list",
        "summary": "List paired Arrow clients",
        "description": "Get a list of Arrow clients paired with the current user account.",
        "tags": [
          "arrow-clients"
        ],
        "security": [
          {
            "OAuth2": [
              "arrow_client_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrowClientsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      },
      "post": {
        "operationId": "arrow-client-pairing-request",
        "summary": "Request pairing of an Arrow client",
        "description": "Request pairing of a given Arrow client with the current user account. Either the `uuid` parameter or the `angelbox_id` parameter is required. In case the Arrow client has been paired already, the API will check if the current user can access the client. If the user can access the client, the API will respond with UUID of the client (i.e. the standard response). Otherwise, the API will respond with \"Permission Denied\".\n",
        "tags": [
          "arrow-clients"
        ],
        "security": [
          {
            "OAuth2": [
              "arrow_client_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID of the paired Arrow client"
                  },
                  "angelbox_id": {
                    "type": "string",
                    "description": "AngelBox ID"
                  }
                },
                "example": {
                  "uuid": "75b62326-eca3-4424-ab68-48e7da47e847"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrowClientPairingResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidBody"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/arrow-clients/{uuid}/": {
      "get": {
        "operationId": "arrow-client-detail",
        "summary": "Arrow client detail",
        "description": "Get detailed information about a given Arrow client.",
        "tags": [
          "arrow-clients"
        ],
        "security": [
          {
            "OAuth2": [
              "arrow_client_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/arrowClientId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrowClientDetailObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/arrow-clients/{uuid}/scan-network/": {
      "post": {
        "operationId": "arrow-client-scan-network",
        "summary": "Scan network",
        "description": "Trigger a scan of the network that a given Arrow client is connected to. The API responds with \"Bad Gateway\" if the Arrow client is not available.\n",
        "tags": [
          "arrow-clients"
        ],
        "security": [
          {
            "OAuth2": [
              "arrow_client_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/arrowClientId"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          },
          "502": {
            "$ref": "#/components/responses/Error502BadGateway"
          }
        }
      }
    },
    "/arrow-clients/{uuid}/services/": {
      "get": {
        "operationId": "arrow-client-services",
        "summary": "List Arrow services",
        "description": "Get a list of services visible and available to a given Arrow client.",
        "tags": [
          "arrow-clients"
        ],
        "security": [
          {
            "OAuth2": [
              "arrow_client_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/arrowClientId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrowClientServicesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/billing/active-services/": {
      "get": {
        "operationId": "my-services",
        "summary": "Retrieve list of my services",
        "tags": [
          "active-service"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Filtering by service type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "active_services_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of my active services.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveServiceListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      },
      "post": {
        "operationId": "activate-service",
        "summary": "Activate new service",
        "tags": [
          "active-service"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "code",
                  "period"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of service",
                    "enum": [
                      "account",
                      "API",
                      "cloud-recording",
                      "broadcasting",
                      "time-lapse",
                      "VVA",
                      "VPA"
                    ],
                    "example": "cloud-recording"
                  },
                  "code": {
                    "type": "string",
                    "description": "Code of service, this code together with type is unique identifier of service",
                    "example": "3-days"
                  },
                  "period": {
                    "type": "string",
                    "format": "duration",
                    "enum": [
                      "P1M",
                      "P1Y"
                    ]
                  }
                },
                "example": {
                  "type": "cloud-recording",
                  "code": "3days",
                  "period": "P1M"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "active_services_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "201": {
            "description": "Newly activated service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveServiceObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidBody"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/billing/active-services/{active_service_id}/": {
      "get": {
        "operationId": "my-service-detail",
        "summary": "Retrieve my service detail",
        "tags": [
          "active-service"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/activeServiceId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "active_services_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns detail of my active service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveServiceObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "put": {
        "operationId": "my-service-update",
        "summary": "Change service",
        "tags": [
          "active-service"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/activeServiceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "code",
                  "period"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of service",
                    "enum": [
                      "account",
                      "API",
                      "cloud-recording",
                      "broadcasting",
                      "time-lapse",
                      "VVA",
                      "VPA"
                    ],
                    "example": "cloud-recording"
                  },
                  "code": {
                    "type": "string",
                    "description": "Code of service, this code together with type is unique identifier of service",
                    "example": "3-days"
                  },
                  "period": {
                    "type": "string",
                    "format": "duration",
                    "enum": [
                      "P1M",
                      "P1Y"
                    ]
                  }
                },
                "example": {
                  "type": "cloud-recording",
                  "code": "3days",
                  "period": "P1M"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "active_services_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "201": {
            "description": "Newly activated service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveServiceObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidBody"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "delete": {
        "operationId": "my-service-cancel",
        "summary": "Cancel active service",
        "tags": [
          "active-service"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/activeServiceId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "active_services_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/billing/orders/": {
      "get": {
        "operationId": "orders",
        "summary": "Retrieve list of orders",
        "tags": [
          "order"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Filtering by order state",
            "schema": {
              "type": "string",
              "enum": [
                "purchase",
                "unpaid",
                "pending-payment",
                "canceled",
                "paid"
              ]
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "orders_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of available services.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/billing/orders/{order_id}/": {
      "get": {
        "operationId": "order-detail",
        "summary": "Retrieve order detail",
        "tags": [
          "order"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "orders_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of available services.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/billing/orders/{order_id}/items/": {
      "get": {
        "operationId": "order-items",
        "summary": "Retrieve list of items on order",
        "tags": [
          "order"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "orders_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of order items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/billing/services/": {
      "get": {
        "operationId": "services",
        "summary": "Retrieve list of available services",
        "tags": [
          "service"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Filtering by service type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "services_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of available services.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/cameras/": {
      "get": {
        "operationId": "my-cameras-list",
        "summary": "Retrieve camera list",
        "tags": [
          "camera"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit result set. Example: `1`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Return results starting at `offset`. Example: `10`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "refresh_rate",
            "in": "query",
            "required": false,
            "description": "Set a maximum number of frames per second sent in an MJPEG stream. For example, if you want to get an MJPEG stream with frame sent every 10 seconds, use value 0.1.",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "max_width",
            "in": "query",
            "required": false,
            "description": "Maximum frame width for the MJPEG stream and LIVE SNAPSHOT.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "max_height",
            "in": "query",
            "required": false,
            "description": "Maximum frame height for the MJPEG stream and LIVE SNAPSHOT.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "has_guests",
            "in": "query",
            "required": false,
            "description": "1 for retrieving list of cameras that have been shared with someone, 0 for retrieving list of cameras that have not been shared wth anyone. Leaving parameter empty will return list of all user cameras.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns camera list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/\""
          }
        ]
      },
      "post": {
        "operationId": "connect-cameras",
        "summary": "Connect new camera",
        "tags": [
          "camera"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "type",
                  "url",
                  "connection_type"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Camera name"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "h264",
                      "mjpeg"
                    ],
                    "description": "Camera type. We currently support H.264 over RTSP and MJPEG over HTTP cameras."
                  },
                  "connection_type": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "arrow"
                    ],
                    "description": "How is the camera connected to Angelcam. The `direct` connection means that the camera stream is available on a public IP address. The `arrow` option can be used for connecting cameras that can be accessed via an Arrow client. Please note that cameras connected via an Arrow client use URL in a specific format. You will need to use the [stream detection](#tag/camera-stream-detection) endpoints to obtain the URL first.\n"
                  },
                  "url": {
                    "type": "string",
                    "format": "url",
                    "description": "Complete URL of a camera stream. H.264 cameras must use \"rtsp\" scheme, for MJPEG cameras it's allowed to use \"http\" and \"https\" schemes. The \"https\" scheme is valid only for cameras using the `direct` connection type.\n"
                  }
                },
                "example": {
                  "name": "My brand new shiny camera",
                  "type": "h264",
                  "connection_type": "direct",
                  "url": "rtsp://username:password@175.36.248.73:554/live.sdp"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "camera_create"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created camera object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidBody"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/cameras/{camera_id}/": {
      "get": {
        "operationId": "my-cameras-detail",
        "summary": "Retrieve camera",
        "tags": [
          "camera"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "refresh_rate",
            "in": "query",
            "required": false,
            "description": "Set a maximum number of frames per second sent in an MJPEG stream. For example, if you want to get an MJPEG stream with frame sent every 10 seconds, use value 0.1.",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "max_width",
            "in": "query",
            "required": false,
            "description": "Maximum frame width for the MJPEG stream and LIVE SNAPSHOT.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "max_height",
            "in": "query",
            "required": false,
            "description": "Maximum frame height for the MJPEG stream and LIVE SNAPSHOT.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Camera object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/{camera_id}/\""
          }
        ]
      },
      "put": {
        "operationId": "my-cameras-update",
        "summary": "Update camera",
        "tags": [
          "camera"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "camera",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Camera name"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "h264",
                      "mjpeg"
                    ],
                    "description": "Camera type. We currently support H.264 over RTSP and MJPEG over HTTP cameras."
                  },
                  "connection_type": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "arrow"
                    ],
                    "description": "How is the camera connected to Angelcam. The `direct` connection means that the camera stream is available on a public IP address. The `arrow` option can be used for connecting cameras that can be accessed via an Arrow client. Please note that cameras connected via an Arrow client use URL in a specific format. You will need to use the [stream detection](#tag/camera-stream-detection) endpoints to obtain the URL first.\n"
                  },
                  "url": {
                    "type": "string",
                    "format": "url",
                    "description": "Complete URL of a camera stream. H.264 cameras must use \"rtsp\" scheme, for MJPEG cameras it's allowed to use \"http\" and \"https\" schemes. The \"https\" scheme is valid only for cameras using the `direct` connection type.\n"
                  }
                },
                "example": {
                  "name": "My updated shiny camera",
                  "type": "h264",
                  "url": "rtsp://username:password@175.36.248.73:554/live.sdp"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "camera_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Camera object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "delete": {
        "operationId": "my-cameras-remove",
        "summary": "Remove camera",
        "tags": [
          "camera"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_delete"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/broadcasting/": {
      "get": {
        "operationId": "my-cameras-broadcasting-info",
        "summary": "General broadcasting information",
        "tags": [
          "broadcasting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "broadcasting_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns general broadcasting information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastingResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/broadcasting/start/": {
      "post": {
        "operationId": "my-cameras-broadcasting-start",
        "summary": "Start public broadcasting on given camera",
        "tags": [
          "broadcasting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "broadcasting_start_stop"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/broadcasting/stop/": {
      "post": {
        "operationId": "my-cameras-broadcasting-stop",
        "summary": "Stop public broadcasting on given camera",
        "tags": [
          "broadcasting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "broadcasting_start_stop"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/clips/": {
      "get": {
        "operationId": "my-cameras-clips-list",
        "summary": "Retrieve camera clips list",
        "tags": [
          "clip"
        ],
        "description": "Retrieves the list of recording clips of given camera",
        "security": [
          {
            "OAuth2": [
              "recording_clips_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "created_by",
            "in": "query",
            "required": false,
            "description": "Filter results only to clips created by given users. A comma separated list of user IDs is expected. No whitespace characters are permited. The asterisk (`*`) character can be used to list all clips. By default the endpoint returns only clips created by the current user.",
            "example": "1,2,3",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClipListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/{camera_id}/clips/\""
          }
        ]
      },
      "post": {
        "operationId": "my-cameras-clips-create",
        "summary": "Create clip",
        "tags": [
          "clip"
        ],
        "description": "Create a recording clip on a given camera",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "clip",
                "required": [
                  "name",
                  "start",
                  "end"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Clip name"
                  },
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start time of clip (ISO 8601)"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End time of clip (ISO 8601)"
                  }
                },
                "example": {
                  "name": "Frontdoor loitering",
                  "start": "2017-01-01T00:00:00.000Z",
                  "end": "2017-01-01T00:25:00.000Z"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "recording_clips_access",
              "recording_clips_create"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "201": {
            "description": "Clip request was received and clip processing will start",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClipObject"
                }
              }
            }
          },
          "400": {
            "description": "No recording data exists for given timeframe, requested clip lenght exceeds 3 hours or there's another error in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Invalid"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -d '{\"name\": \"Frontdoor loitering\", \"start\": \"2017-01-01T00:00:00.000Z\", \"end\": \"2017-01-01T00:25:00.000Z\"}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer {access_token}\" -X POST \"https://api.angelcam.com/v1/cameras/{camera_id}/clips/\""
          }
        ]
      }
    },
    "/cameras/{camera_id}/clips/{clip_id}/": {
      "get": {
        "operationId": "my-cameras-clips-detail",
        "summary": "Retrieve a single clip",
        "tags": [
          "clip"
        ],
        "description": "Retrieves the details of a recording clip",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "$ref": "#/components/parameters/clipId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_clips_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClipObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/{camera_id}/clips/{clip_id}/\""
          }
        ]
      }
    },
    "/cameras/{camera_id}/clips/{clip_id}/share/": {
      "post": {
        "operationId": "my-cameras-clips-share",
        "summary": "Share a clip via email",
        "tags": [
          "clip"
        ],
        "description": "Share clip recording via email",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "$ref": "#/components/parameters/clipId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "recording_clips_share"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/clips/{clip_id}/stream/": {
      "get": {
        "operationId": "my-cameras-clips-stream",
        "summary": "Retrieve a clip stream",
        "tags": [
          "clip"
        ],
        "description": "Retrieves stream of a recording clip",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "$ref": "#/components/parameters/clipId"
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Start time of a stream. Example: `2016-03-19T08:00:00Z`.",
            "example": "2017-01-01T00:00:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_clips_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingStreamResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/events/": {
      "get": {
        "operationId": "camera-events",
        "summary": "Retrieve camera event list",
        "tags": [
          "event"
        ],
        "description": "Retrieves list of events belonging to the specified camera",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Example: `2017-03-07T14:00:00Z`.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Example: `2017-03-07T16:00:00Z`.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result set. Example: `1`.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "event_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/guests/": {
      "get": {
        "operationId": "my-cameras-guests",
        "summary": "Retrieve camera guests list",
        "tags": [
          "camera-guest"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit result set. Example: `1`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Return results starting at `offset`. Example: `10`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_guest_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns camera guests list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGuestListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/{camera_id}/guests/\""
          }
        ]
      },
      "post": {
        "operationId": "my-cameras-guest-create",
        "summary": "Create camera guest",
        "tags": [
          "camera-guest"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "guest",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "permissions": {
                    "$ref": "#/components/schemas/CameraGuestPermissionObject"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "camera_guest_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGuestObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -d '{\"email\": \"user@example.com\", \"permissions\": {\"can_view_rec\": true, \"share_notifications\": false}}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer {access_token}\" -X POST \"https://api.angelcam.com/v1/cameras/{camera_id}/guests/\"\n"
          }
        ]
      }
    },
    "/cameras/{camera_id}/guests/{guest_id}/": {
      "get": {
        "operationId": "my-cameras-guest",
        "summary": "Retrieve camera guest",
        "tags": [
          "camera-guest"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "$ref": "#/components/parameters/guestId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_guest_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Camera guest object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGuestObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/{camera_id}/guests/{guest_id}\""
          }
        ]
      },
      "put": {
        "operationId": "my-cameras-guest-update",
        "summary": "Update camera guest",
        "tags": [
          "camera-guest"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "$ref": "#/components/parameters/guestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "guest",
                "properties": {
                  "permissions": {
                    "$ref": "#/components/schemas/CameraGuestPermissionObject"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "camera_guest_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGuestObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -d '{\"permissions\": {\"can_view_rec\": true, \"share_notifications\": false}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer {access_token}\" -X PUT \"https://api.angelcam.com/v1/cameras/{camera_id}/guests/{guest_id}\"\n"
          }
        ]
      },
      "delete": {
        "operationId": "my-cameras-guest-remove",
        "summary": "Remove camera guest",
        "tags": [
          "camera-guest"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "$ref": "#/components/parameters/guestId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_guest_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X DELETE \"https://api.angelcam.com/v1/cameras/{camera_id}/guests/{guest_id}\""
          }
        ]
      }
    },
    "/cameras/{camera_id}/recording/": {
      "get": {
        "operationId": "my-cameras-recording-info",
        "summary": "General recording information",
        "tags": [
          "recording"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns general recording information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/{camera_id}/recording/\""
          }
        ]
      }
    },
    "/cameras/{camera_id}/recording/download/": {
      "get": {
        "operationId": "my-cameras-recording-download",
        "summary": "Download a given recording section",
        "tags": [
          "recording"
        ],
        "description": "This endpoint will construct a download URL for a specified recording section of a given camera. If there are no records within the section, the download URL will be still returned, however, the URL will respond with HTTP 404. If there are any gaps within the specified recording section, they will be skipped.\n\nPlease keep in mind that the maximum downloadable length is 3 hours.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Start time of the download. Example: `2016-03-19T08:00:00Z`.",
            "example": "2017-01-01T00:00:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "End time of the download. Example: `2016-03-19T14:00:00Z.`",
            "example": "2017-01-01T00:10:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "description": "Filename suggestion for the download. The filename extension will be added automatically.\n",
            "example": "clip",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingDownloadResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/recording/start/": {
      "post": {
        "operationId": "my-cameras-recording-start",
        "summary": "Start recording on given camera",
        "tags": [
          "recording"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "duration",
            "in": "query",
            "description": "Time in seconds after which recording will be stopped. In case multiple auto stop recording requests are received on same camera the one which ends later will be applied. If this endpoint is called without this parameter recording will not be stopped automatically and if there's scheduled auto stop it will be canceled.",
            "example": 30,
            "schema": {
              "type": "integer",
              "minimum": 30,
              "maximum": 1800
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_start_stop"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/recording/stop/": {
      "post": {
        "operationId": "my-cameras-recording-stop",
        "summary": "Stop recording on given camera",
        "tags": [
          "recording"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_start_stop"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/cameras/{camera_id}/recording/stream/": {
      "get": {
        "operationId": "my-cameras-recording-stream",
        "summary": "Create and return recorded stream for a specified time",
        "tags": [
          "recording"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Start time of a stream. Example: `2016-03-19T08:00:00Z`.",
            "example": "2017-01-01T00:00:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "description": "End time of a stream. If missing, stream will play till the very end of recorded footage. Example: `2016-03-19T14:00:00Z.`\n",
            "example": "2017-01-01T00:10:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingStreamResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/{camera_id}/recording/stream/\""
          }
        ]
      }
    },
    "/cameras/{camera_id}/recording/timeline/": {
      "get": {
        "operationId": "my-cameras-recording-timeline",
        "summary": "Retrieve timeline of records for given camera",
        "tags": [
          "recording"
        ],
        "description": "Please keep in mind that maximum length of timeline is 1 day.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Start time of a timeline. Example: `2016-03-19T08:00:00Z`.",
            "example": "2017-01-01T00:00:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "End time of a timeline. Example: `2016-03-19T14:00:00Z.`",
            "example": "2017-01-01T00:10:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingTimelineResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/cameras/{camera_id}/recording/timeline/\""
          }
        ]
      }
    },
    "/cameras/stream-detection/": {
      "post": {
        "operationId": "stream-detection-start",
        "summary": "Start stream detection",
        "description": "Retrieve `session_id` which can be used for [querying stream detection result](/#operation/stream-detection-result).\n",
        "tags": [
          "camera-stream-detection"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Various address types can be used. Valid examples: `my-camera.my-site.com/feed`, `http://test:test@my-camera.my-site.com:80/feed?show=1`, `rtsp://site.domain.com/camera1`, `132.45.32.21`. As you can see from examples `address` can optionally contain information about `port`, `username` and `password`. In such cases these fields can be omitted from request body. The `arrow_service` field must not be present if the `address` field is being used.\n"
                  },
                  "arrow_service": {
                    "type": "object",
                    "properties": {
                      "arrow_client": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Arrow client UUID"
                      },
                      "service_id": {
                        "type": "string",
                        "description": "Arrow service ID"
                      }
                    },
                    "description": "Use this field for stream detection via an Arrow client. The `path` field can be used to request detection on a specific endpoint in addition to all endpoints tested by the stream detector service. The `address` field must not be present if the `arrow_service` field is being used.\n"
                  },
                  "path": {
                    "type": "string",
                    "description": "Stream path (if not given in the address field)."
                  },
                  "port": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535,
                    "description": "If port is not specified all reasonable ports will be tested."
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "example": {
                  "address": "http://test:test@my-camera.my-site.com:80/feed?show=1"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "streams_detect"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraStartStreamDetectionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/cameras/stream-detection/{session_id}/": {
      "get": {
        "operationId": "stream-detection-result",
        "summary": "Retrieve stream detection result",
        "tags": [
          "camera-stream-detection"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sessionId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "streams_detect"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraStreamDetectionResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/clients/": {
      "get": {
        "operationId": "my-clients-list",
        "summary": "Retrieve clients list",
        "tags": [
          "client"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit result set. Example: `1`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Return results starting at `offset`. Example: `10`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "client_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns client list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      },
      "post": {
        "operationId": "create-client",
        "summary": "Creates new client account",
        "description": "Creates a new client account. After successful creation client receives an email with link for account activation.\n",
        "tags": [
          "client"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "first_name",
                  "last_name",
                  "email"
                ],
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "Clients first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Clients last name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Clients email"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Clients phone number"
                  },
                  "invoice_to": {
                    "type": "string",
                    "enum": [
                      "me",
                      "client"
                    ],
                    "default": "me",
                    "description": "All services are invoice to reseller (me) or directly to client."
                  },
                  "limited_account": {
                    "type": "boolean",
                    "default": false,
                    "description": "Limited clients cannot connect new cameras or purchase any services, by themselves.\n"
                  },
                  "allowed_access": {
                    "type": "boolean",
                    "default": true,
                    "description": "This option can be used to give away access to the client user account. A client action is required in order to get the access again.\n"
                  },
                  "activated": {
                    "type": "boolean",
                    "default": false,
                    "description": "Create the client account as already activated (i.e. do not send the activation email). A special permission is required for the reseller account in order to use this option.\n"
                  },
                  "password": {
                    "type": "string",
                    "description": "Create the client account with a given default password. A special permission is required for the reseller account in order to use this option.\n"
                  }
                },
                "example": {
                  "first_name": "Joe",
                  "last_name": "Parker",
                  "email": "joe@angelcam.com",
                  "phone": "+1 111 222 333",
                  "invoice_to": "me",
                  "limited_account": false
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "client_create"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created client object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidBody"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/clients/{client_id}/": {
      "get": {
        "operationId": "my-client-detail",
        "summary": "Retrieve client",
        "tags": [
          "client"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/clientId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "client_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Client object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "put": {
        "operationId": "update-client",
        "summary": "Update client account",
        "tags": [
          "client"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/clientId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "client",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "Clients first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Clients last name"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Clients phone number"
                  },
                  "invoice_to": {
                    "type": "string",
                    "enum": [
                      "me",
                      "client"
                    ],
                    "description": "All services are invoice to reseller (me) or directly to client."
                  },
                  "limited_account": {
                    "type": "boolean",
                    "description": "Limited clients cannot connect new cameras or purchase any services, by themselves.\n"
                  },
                  "allowed_access": {
                    "type": "boolean",
                    "description": "This option can be used to give away access to the client user account. A client action is required in order to get the access again. (It is only possible to change this value from true to false using this endpoint.)\n"
                  },
                  "password": {
                    "type": "string",
                    "description": "Set password for the client account. A special permission is required for the reseller account in order to use this option.\n"
                  }
                },
                "example": {
                  "first_name": "Joe",
                  "last_name": "Parker",
                  "phone": "+1 111 222 333",
                  "invoice_to": "client",
                  "limited_account": false
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "client_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Client object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidBody"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/clients/{client_id}/invite/": {
      "post": {
        "operationId": "my-client-invite",
        "summary": "Resend invitation email",
        "description": "For resending an invitation email. This is useful in case when client does not receive the first invitation email,\n so client get new chance to activate their account and set a password.\n",
        "tags": [
          "client"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/clientId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "client_create"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/events/": {
      "post": {
        "operationId": "events-create",
        "summary": "Create event",
        "tags": [
          "event"
        ],
        "description": "This endpoint has rate limiting in place. The endpoint will accept at most 10 requests per minute\nfor a given hash (see [Nuts and bolts](#section/Angelcam-API/Nuts-and-bolts) for more details).\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "event",
                "required": [
                  "hash"
                ],
                "properties": {
                  "hash": {
                    "type": "string",
                    "description": "Event API hash (a unique token for each sensor found in My Angelcam dashboard or obtained\nvia Sensor Resource) - used to authenticate the request and pair the event with corresponding\nsensor.\n"
                  },
                  "title": {
                    "type": "string"
                  },
                  "occurred_at": {
                    "type": "string",
                    "format": "datetime"
                  }
                },
                "example": {
                  "hash": "50yxnlu2o2"
                }
              }
            }
          }
        },
        "security": [],
        "responses": {
          "201": {
            "description": "Event was received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventObject"
                }
              }
            }
          },
          "400": {
            "description": "The event hash is invalid or there's another error in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Invalid"
                }
              }
            }
          },
          "429": {
            "description": "The rate limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429TooManyRequests"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -d '{\"hash\": \"50yxnlu2o2\"}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X POST \"https://api.angelcam.com/v1/events/\""
          },
          {
            "lang": "python",
            "source": "import requests\nurl = 'https://api.angelcam.com/v1/events/'\npayload = {'hash': '50yxnlu2o2'}\nrequests.post(url, json=payload)"
          }
        ]
      },
      "get": {
        "operationId": "events-create-get",
        "summary": "Create event by get request",
        "tags": [
          "event"
        ],
        "description": "In cases when it's not possible to send post request we allowed to create event by GET request. In general you should avoid using this method and rather prefer creating events via POST request.\n",
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "required": true,
            "description": "Event API hash (a unique token for each camera found in My Angelcam dashboard or obtained\nvia Camera Resource) - used to authenticate the request and pair the event with corresponding\ncamera.\n",
            "example": "50yxnlu2o2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [],
        "responses": {
          "201": {
            "description": "Event was received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventObject"
                }
              }
            }
          },
          "400": {
            "description": "The event hash is invalid or there's another error in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Invalid"
                }
              }
            }
          },
          "429": {
            "description": "The rate limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429TooManyRequests"
                }
              }
            }
          }
        }
      }
    },
    "/me/": {
      "get": {
        "operationId": "me",
        "summary": "Current user info",
        "tags": [
          "user"
        ],
        "security": [
          {
            "OAuth2": [
              "user_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/me/\""
          }
        ]
      },
      "delete": {
        "operationId": "me-delete",
        "summary": "Delete current user",
        "tags": [
          "user"
        ],
        "security": [
          {
            "OAuth2": [
              "user_delete"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/public-cameras/": {
      "get": {
        "operationId": "public-cameras-list",
        "summary": "Retrieve public camera list",
        "tags": [
          "public-camera"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit result set. Example: `1`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Return results starting at `offset`. Example: `10`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "online",
            "in": "query",
            "required": false,
            "description": "`1` for filtering only cameras that are online. `0` for filtering only cameras that are offline. Be aware that you cannot fully rely on this filtering. The camera status is checked every 10 minutes. Therefore the real status of camera can differ from API status.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "public_cameras_access"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns public camera list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicCameraListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/public-cameras/{camera_id}/": {
      "get": {
        "operationId": "public-cameras-detail",
        "summary": "Retrieve public camera",
        "tags": [
          "public-camera"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sharedCameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "public_cameras_access"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Camera object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicCameraObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/recording/stream/{streamer_name}/{streamer_id}/": {
      "get": {
        "operationId": "my-cameras-recordings-stream-info",
        "summary": "Retrieve recording stream info",
        "tags": [
          "recording"
        ],
        "security": [
          {
            "OAuth2": [
              "recording_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "streamer_name",
            "in": "path",
            "required": true,
            "description": "Streamer server name.",
            "example": "rec-streamer-eu-central-1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "streamer_id",
            "in": "path",
            "required": true,
            "description": "Stream ID.",
            "example": "61c59a859e9244a19713fdfec6e50184",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingStreamInfoResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/recording/stream/{streamer_name}/{streamer_id}/\""
          }
        ]
      }
    },
    "/rts/": {
      "get": {
        "operationId": "rts-settings-retrieve",
        "summary": "RTS settings",
        "tags": [
          "rts_settings"
        ],
        "security": [
          {
            "OAuth2": [
              "rts_settings_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RTSSettingsObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      },
      "put": {
        "operationId": "rts-settings-update",
        "summary": "Update RTS settings",
        "tags": [
          "rts_settings"
        ],
        "security": [
          {
            "OAuth2": [
              "rts_settings_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "RTS settings",
                "properties": {
                  "incident_ttl": {
                    "type": "string",
                    "enum": [
                      "PT1M",
                      "PT3M",
                      "PT5M",
                      "PT10M",
                      "PT30M",
                      "PT1H"
                    ],
                    "description": "ISO 8601 duration format. The value represents the minimal delay between two events triggered by the same sensor that has to pass before Angelcam sends another notification to the user."
                  }
                },
                "example": {
                  "incident_ttl": "PT1M"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RTSSettings object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RTSSettingsObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/rts/arm/": {
      "post": {
        "operationId": "rts-arm",
        "summary": "Arm RTS",
        "tags": [
          "rts_settings"
        ],
        "security": [
          {
            "OAuth2": [
              "rts_arming_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/rts/disarm/": {
      "post": {
        "operationId": "rts-disarm",
        "summary": "Disarm RTS",
        "tags": [
          "rts_settings"
        ],
        "security": [
          {
            "OAuth2": [
              "rts_arming_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/rts/messages/": {
      "get": {
        "operationId": "rts-messages",
        "summary": "Retrieve messages",
        "tags": [
          "rts_messages"
        ],
        "description": "Retrieves list of user messages",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit result set. Example: `1`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Return results starting at `offset`. Example: `10`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "messages_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/rts/messages/{message_id}/": {
      "get": {
        "operationId": "rts-message-detail",
        "summary": "Retrieve message detail",
        "description": "Retrieve message detail",
        "tags": [
          "rts_messages"
        ],
        "security": [
          {
            "OAuth2": [
              "messages_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/messageId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "put": {
        "operationId": "rts-message-update",
        "summary": "Update message",
        "description": "Update messages",
        "tags": [
          "rts_messages"
        ],
        "security": [
          {
            "OAuth2": [
              "messages_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/messageId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "is_read": {
                    "type": "boolean",
                    "description": "Was message read by user?"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/rts/messages/set-all-read/": {
      "post": {
        "operationId": "rts-message-set-all-read",
        "summary": "Set all messages as read",
        "description": "Set all messages as read",
        "tags": [
          "rts_messages"
        ],
        "security": [
          {
            "OAuth2": [
              "messages_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "set_as_read_count": {
                      "type": "number",
                      "description": "Number of messages which were marked as read"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/rts/messages/unread-count/": {
      "get": {
        "operationId": "rts-message-unread-count",
        "summary": "Retrieve unread messages count",
        "description": "Retrieve unread messages count",
        "tags": [
          "rts_messages"
        ],
        "security": [
          {
            "OAuth2": [
              "messages_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unread_count": {
                      "type": "number",
                      "description": "Unread messages count"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/sensors/": {
      "get": {
        "operationId": "my-sensors-list",
        "summary": "Retrieve sensor list",
        "tags": [
          "sensor"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit result set. Example: `1`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Return results starting at `offset`. Example: `10`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "sensor_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns sensor list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      },
      "post": {
        "operationId": "connect-sensors",
        "summary": "Connect new sensor",
        "tags": [
          "sensor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Sensor name"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "motion",
                      "camera_motion",
                      "door_window",
                      "smoke",
                      "fire",
                      "glass_break",
                      "shock_vibration",
                      "water",
                      "perimeter_entry"
                    ],
                    "description": "Sensor type"
                  },
                  "placement": {
                    "type": "string",
                    "enum": [
                      "indoors",
                      "outdoors"
                    ],
                    "description": "Sensor placement"
                  },
                  "manufacturer": {
                    "type": "string",
                    "description": "Sensor manufacturer"
                  },
                  "model": {
                    "type": "string",
                    "description": "Sensor model"
                  },
                  "note": {
                    "type": "string",
                    "description": "Any note related to sensor"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Defaults to True. Indicates if sensor is enabled or not. If disabled then all events from the sensor are ignored."
                  },
                  "override_arming": {
                    "type": "boolean",
                    "description": "Defaults to False. If enabled, an event received from the sensor will always trigger an incident regardless of the arming settings."
                  },
                  "camera": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Camera ID sensor is bind to"
                  },
                  "enable_cloud_recording_for": {
                    "type": "string",
                    "format": "duration",
                    "enum": [
                      "PT30S",
                      "PT1M",
                      "PT2M",
                      "PT5M"
                    ],
                    "description": "Duration of event Recording triggered by an event from this sensor. This setting is applied only if sensor has an assigned camera with active Cloud Recording."
                  },
                  "incident_delay": {
                    "type": "string",
                    "format": "duration",
                    "description": "A delay before RTS incident is triggered. If the site is disarmed during this period, no incident is forwarded. However the video from the binded camera is recorded. PT0S means no delay and PT3M is the max."
                  }
                },
                "example": {
                  "name": "My brand new sensor",
                  "type": "smoke"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "sensor_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created sensor object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidBody"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/sensors/{sensor_id}/": {
      "get": {
        "operationId": "my-sensors-detail",
        "summary": "Retrieve sensor",
        "tags": [
          "sensor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sensorId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "sensor_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Sensor object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "put": {
        "operationId": "my-sensors-update",
        "summary": "Update sensor",
        "tags": [
          "sensor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sensorId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "sensor",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Sensor name"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "motion",
                      "camera_motion",
                      "door_window",
                      "smoke",
                      "fire",
                      "glass_break",
                      "shock_vibration",
                      "water",
                      "perimeter_entry"
                    ],
                    "description": "Sensor type"
                  },
                  "placement": {
                    "type": "string",
                    "enum": [
                      "indoors",
                      "outdoors"
                    ],
                    "description": "Sensor placement"
                  },
                  "manufacturer": {
                    "type": "string",
                    "description": "Sensor manufacturer"
                  },
                  "model": {
                    "type": "string",
                    "description": "Sensor model"
                  },
                  "note": {
                    "type": "string",
                    "description": "Any note related to sensor"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Defaults to True. Indicates if sensor is enabled or not. If disabled then all events from the sensor are ignored."
                  },
                  "override_arming": {
                    "type": "boolean",
                    "description": "Defaults to False. If enabled, an event received from the sensor will always trigger an incident regardless of the arming settings."
                  },
                  "camera": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Camera ID sensor is bind to"
                  },
                  "enable_cloud_recording_for": {
                    "type": "string",
                    "format": "duration",
                    "enum": [
                      "PT30S",
                      "PT1M",
                      "PT2M",
                      "PT5M"
                    ],
                    "description": "Duration of event Recording triggered by an event from this sensor. This setting is applied only if sensor has an assigned camera with active Cloud Recording."
                  },
                  "incident_delay": {
                    "type": "string",
                    "format": "duration",
                    "description": "A delay before RTS incident is triggered. If the site is disarmed during this period, no incident is forwarded. However the video from the binded camera is recorded. PT0S means no delay and PT3M is the max."
                  }
                },
                "example": {
                  "name": "My updated shiny sensor",
                  "type": "smoke",
                  "camera": 24,
                  "enable_cloud_recording_for": "PT1M",
                  "incident_delay": "PT0S"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "sensor_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Sensor object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "delete": {
        "operationId": "my-sensors-remove",
        "summary": "Remove sensor",
        "tags": [
          "sensor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sensorId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "sensor_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/shared-cameras/": {
      "get": {
        "operationId": "shared-cameras-list",
        "summary": "Retrieve shared camera list",
        "tags": [
          "shared-camera"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit result set. Example: `1`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Return results starting at `offset`. Example: `10`.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "refresh_rate",
            "in": "query",
            "required": false,
            "description": "Set a maximum number of keyframes sent in MJPEG stream per second. For example if you want to have MJPEG stream with keyframe sent every 10 seconds, post value 0.1.",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "max_width",
            "in": "query",
            "required": false,
            "description": "Maximum width of MJPEG stream and LIVE SNAPSHOT.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "max_height",
            "in": "query",
            "required": false,
            "description": "Maximum height of MJPEG stream and LIVE SNAPSHOT.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns shared camera list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedCameraListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/shared-cameras/\""
          }
        ]
      }
    },
    "/shared-cameras/{camera_id}/": {
      "get": {
        "operationId": "shared-cameras-detail",
        "summary": "Retrieve shared camera",
        "tags": [
          "shared-camera"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sharedCameraId"
          },
          {
            "name": "refresh_rate",
            "in": "query",
            "required": false,
            "description": "Set a maximum number of keyframes sent in MJPEG stream per second. For example if you want to have MJPEG stream with keyframe sent every 10 seconds, post value 0.1.",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "max_width",
            "in": "query",
            "required": false,
            "description": "Maximum width of MJPEG stream and LIVE SNAPSHOT.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "max_height",
            "in": "query",
            "required": false,
            "description": "Maximum height of MJPEG stream and LIVE SNAPSHOT.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Camera object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedCameraObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/shared-cameras/{camera_id}/\""
          }
        ]
      },
      "delete": {
        "operationId": "shared-cameras-remove",
        "summary": "Remove shared camera",
        "tags": [
          "shared-camera"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sharedCameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "camera_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/shared-cameras/{camera_id}/clips/": {
      "get": {
        "operationId": "shared-cameras-clips-list",
        "summary": "Retrieve camera clips list",
        "tags": [
          "shared-camera-clip"
        ],
        "description": "Retrieve a list of recording clips for a given shared camera",
        "security": [
          {
            "OAuth2": [
              "recording_clips_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "name": "created_by",
            "in": "query",
            "required": false,
            "description": "Filter results only to clips created by given users. A comma separated list of user IDs is expected. No whitespace characters are permited. The asterisk (`*`) character can be used to list all clips. By default the endpoint returns only clips created by the current user.",
            "example": "1,2,3",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedCameraClipListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "post": {
        "operationId": "shared-cameras-clips-create",
        "summary": "Create clip",
        "tags": [
          "shared-camera-clip"
        ],
        "description": "Create a recording clip on a given shared camera",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "clip",
                "required": [
                  "name",
                  "start",
                  "end"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Clip name"
                  },
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start time of clip (ISO 8601)"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End time of clip (ISO 8601)"
                  }
                },
                "example": {
                  "name": "Frontdoor loitering",
                  "start": "2017-01-01T00:00:00.000Z",
                  "end": "2017-01-01T00:25:00.000Z"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "recording_clips_access",
              "recording_clips_create"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "201": {
            "description": "Clip request was received and clip processing will start",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedCameraClipObject"
                }
              }
            }
          },
          "400": {
            "description": "No recording data exists for given timeframe, requested clip lenght exceeds 3 hours or there's another error in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Invalid"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/shared-cameras/{camera_id}/clips/{clip_id}/": {
      "get": {
        "operationId": "shared-cameras-clips-detail",
        "summary": "Retrieve a single clip",
        "tags": [
          "shared-camera-clip"
        ],
        "description": "Retrieves the details for a given recording clip",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "$ref": "#/components/parameters/clipId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_clips_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedCameraClipObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/shared-cameras/{camera_id}/clips/{clip_id}/stream/": {
      "get": {
        "operationId": "shared-cameras-clips-stream",
        "summary": "Retrieve a clip stream",
        "tags": [
          "shared-camera-clip"
        ],
        "description": "Retrieves stream of a recording clip",
        "parameters": [
          {
            "$ref": "#/components/parameters/cameraId"
          },
          {
            "$ref": "#/components/parameters/clipId"
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Start time of a stream. Example: `2016-03-19T08:00:00Z`.",
            "example": "2017-01-01T00:00:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_clips_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingStreamResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/shared-cameras/{camera_id}/recording/": {
      "get": {
        "operationId": "shared-cameras-recordings-info",
        "summary": "General shared recording information",
        "tags": [
          "shared-camera-recording"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sharedCameraId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns general recording information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/shared-cameras/{camera_id}/recording/\""
          }
        ]
      }
    },
    "/shared-cameras/{camera_id}/recording/stream/": {
      "get": {
        "operationId": "shared-cameras-recordings-stream",
        "summary": "Retrieve recording stream for shared camera",
        "description": "Create and return recorded stream of shared camera for a specified time",
        "tags": [
          "shared-camera-recording"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sharedCameraId"
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Start time of a stream. Example: `2016-03-19T08:00:00Z`.",
            "example": "2017-01-01T00:00:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "description": "End time of a stream. If missing, stream will play till the very end of recorded footage. Example: `2016-03-19T14:00:00Z.`\n",
            "example": "2017-01-01T00:10:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingStreamResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/shared-cameras/{camera_id}/recording/stream/\""
          }
        ]
      }
    },
    "/shared-cameras/{camera_id}/recording/timeline/": {
      "get": {
        "operationId": "shared-cameras-recordings-timeline",
        "summary": "Retrieve timeline of records for given shared camera",
        "tags": [
          "shared-camera-recording"
        ],
        "description": "Please keep in mind that maximum length of timeline is 1 day.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sharedCameraId"
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "Start time of a timeline. Example: `2016-03-19T08:00:00Z`.",
            "example": "2017-01-01T00:00:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "End time of a timeline. Example: `2016-03-19T14:00:00Z.`",
            "example": "2017-01-01T00:10:00.000Z",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "recording_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingTimelineResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -H \"Accept: application/json\" -H \"Authorization: Bearer {access_token}\" -X GET \"https://api.angelcam.com/v1/shared-cameras/{camera_id}/recording/timeline/\""
          }
        ]
      }
    },
    "/sites/": {
      "post": {
        "operationId": "sites-create",
        "summary": "Create site",
        "tags": [
          "site"
        ],
        "security": [
          {
            "OAuth2": [
              "sites_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Bedroom",
                    "description": "Site name"
                  },
                  "parent": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Parent Site ID"
                  },
                  "is_armed": {
                    "type": "boolean",
                    "description": "If site is not armed user will not get notifications when something happens"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          }
        }
      }
    },
    "/sites/{site_id}/": {
      "get": {
        "operationId": "site-detail-retrieve",
        "summary": "Retrieve site",
        "tags": [
          "site"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/siteId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "sites_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "put": {
        "operationId": "site-detail-update",
        "summary": "Update Site",
        "tags": [
          "site"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/siteId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Site name"
                  },
                  "parent": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Parent Site ID"
                  },
                  "is_armed": {
                    "type": "boolean",
                    "description": "If site is not armed user will not get notifications when something happens"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "sites_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      },
      "delete": {
        "operationId": "site-detail-destroy",
        "summary": "Destroy Site",
        "description": "In case that destroyed site contains descendants these descendants are also deleted. All cameras from deleted site and its descendants will move to first not deleted ancestor.",
        "tags": [
          "site"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/siteId"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "sites_manage"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    },
    "/sites/{site_id}/events/": {
      "get": {
        "operationId": "site-events",
        "summary": "Retrieve event list for site",
        "tags": [
          "event"
        ],
        "description": "Retrieves list of events belongings to the specified site",
        "parameters": [
          {
            "$ref": "#/components/parameters/siteId"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Example: `2017-03-07T14:00:00Z`.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Example: `2017-03-07T16:00:00Z`.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result set. Example: `1`.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "security": [
          {
            "OAuth2": [
              "event_access"
            ]
          },
          {
            "PersonalAccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400InvalidParams"
          },
          "401": {
            "$ref": "#/components/responses/Error401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Error403PermissionDenied"
          },
          "404": {
            "$ref": "#/components/responses/Error404NotFound"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActiveServiceListResponse": {
        "type": "object",
        "title": "Active service list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all services"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of services available for user",
            "items": {
              "$ref": "#/components/schemas/ActiveServiceObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "ActiveServiceObject": {
        "type": "object",
        "title": "Service object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "current_service": {
            "$ref": "#/components/schemas/ServiceObject",
            "description": "Current service",
            "nullable": true
          },
          "pending_service": {
            "$ref": "#/components/schemas/ServiceObject",
            "description": "Pedning service",
            "nullable": true
          },
          "renew_service": {
            "$ref": "#/components/schemas/ServiceObject",
            "description": "Pedning service",
            "nullable": true
          },
          "renew_period": {
            "type": "string",
            "format": "duration",
            "example": "P1M",
            "nullable": true
          },
          "valid_until": {
            "type": "string",
            "format": "datetime"
          },
          "in_use": {
            "type": "boolean",
            "description": "Says if service is in use for example by a camera"
          },
          "usage_detail": {
            "type": "object",
            "description": "More informataion about usage. This fields is depandent on serrvice type. Can provide information like"
          }
        }
      },
      "ApplicationObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "LSA",
              "CRA",
              "VVA",
              "VPA",
              "TLA"
            ]
          }
        },
        "required": [
          "code"
        ],
        "example": {
          "code": "LSA"
        }
      },
      "ArrowClientDetailObject": {
        "type": "object",
        "title": "Arrow client",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the Arrow client"
          },
          "mac": {
            "type": "string",
            "format": "mac",
            "description": "MAC address of the device running the Arrow client"
          },
          "ip": {
            "type": "string",
            "description": "Public IP address of the device running the Arrow client"
          },
          "status": {
            "type": "string",
            "enum": [
              "online",
              "offline",
              "not_paired"
            ],
            "description": "Current availability of the Arrow client. The `not_paired` value means that there is an active pairing request for this client, however, the client has not reached Angelcam servers yet.\n"
          },
          "scanning": {
            "type": "boolean",
            "description": "True if the client is currently scanning the target network, false otherwise\n"
          }
        },
        "required": [
          "uuid",
          "status"
        ],
        "example": {
          "uuid": "75b62326-eca3-4424-ab68-48e7da47e847",
          "mac": "12:34:56:78:9a:bc",
          "ip": "1.1.1.1",
          "status": "online",
          "scanning": true
        }
      },
      "ArrowClientListObject": {
        "type": "object",
        "title": "Paired Arrow client",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the Arrow client"
          },
          "mac": {
            "type": "string",
            "format": "mac",
            "description": "MAC address of the device running the Arrow client"
          },
          "ip": {
            "type": "string",
            "description": "Public IP address of the device running the Arrow client"
          }
        },
        "required": [
          "uuid",
          "mac",
          "ip"
        ],
        "example": {
          "uuid": "75b62326-eca3-4424-ab68-48e7da47e847",
          "mac": "12:34:56:78:9a:bc",
          "ip": "1.1.1.1"
        }
      },
      "ArrowClientPairingResponse": {
        "type": "object",
        "title": "Arrow client pairing response",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the paired Arrow client"
          }
        },
        "required": [
          "uuid"
        ],
        "example": {
          "uuid": "75b62326-eca3-4424-ab68-48e7da47e847"
        }
      },
      "ArrowClientServicesResponse": {
        "type": "object",
        "title": "A list of Arrow services",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of all services"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "A list of Arrow services",
            "items": {
              "$ref": "#/components/schemas/ArrowServiceObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "ArrowClientsResponse": {
        "type": "object",
        "title": "A list of Arrow clients",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of all clients"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "A list of Arrow clients",
            "items": {
              "$ref": "#/components/schemas/ArrowClientListObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "ArrowServiceObject": {
        "type": "object",
        "title": "Arrow service",
        "properties": {
          "id": {
            "type": "string",
            "description": "Arrow service ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "http",
              "rtsp"
            ],
            "description": "Type of the service."
          },
          "mac": {
            "type": "string",
            "format": "mac",
            "description": "MAC address of the device providing this service. The MAC address will be valid only for services discovered via the network scan. In all other cases, it will be a fake MAC address starting with `FF:FF` prefix.\n"
          },
          "ip": {
            "type": "string",
            "description": "IP address used by the corresponding Arrow client to connect to the service (i.e. local IP address of the service).\n"
          },
          "port": {
            "type": "integer",
            "description": "Port number used by the corresponding Arrow client to connect to the service (i.e. the port which the service is listening on).\n"
          },
          "camera_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "A list of cameras (their IDs) which use this service."
          }
        },
        "required": [
          "id",
          "type",
          "mac",
          "ip",
          "port",
          "camera_ids"
        ],
        "example": {
          "id": "21af",
          "type": "rtsp",
          "mac": "ff:ff:7f:00:00:01",
          "ip": "127.0.0.1",
          "port": 554,
          "camera_ids": []
        }
      },
      "BroadcastingResponse": {
        "type": "object",
        "title": "Broadcasting information",
        "required": [
          "enabled",
          "public_page",
          "streams"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "True if the public broadcasting is enabled for this camera, false otherwise This settings affects only the public page and the HTML embed code."
          },
          "public_page": {
            "type": "boolean",
            "description": "True if the public page (i.e. xyz.click2stream.com) is enabled for this camera, false otherwise."
          },
          "streams": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StreamObject"
            },
            "description": "Available broadcasting streams or `null` if the current broadcasting service plan does not allow broadcasting via API. [Read about stream URLs expirations.](http://help.angelcam.com/en/articles/3952149-how-to-deal-with-stream-url-expiration)"
          }
        },
        "example": {
          "enabled": true,
          "public_page": false,
          "streams": [
            {
              "format": "mjpeg",
              "url": "http://e1.angelcam.com/stream/81/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c"
            },
            {
              "format": "mp4",
              "url": "http://e1.angelcam.com/stream/81/stream.mp4?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
            },
            {
              "format": "mpegts",
              "url": "http://e1.angelcam.com/stream/81/stream.ts?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
            },
            {
              "format": "hls",
              "url": "http://e1.angelcam.com/stream/81/playlist.m3u8?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjQwMSwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.8ac35b434e768e8f10161b2d74da492f5fd8a8c115c18cbb421017665acd908a"
            }
          ]
        }
      },
      "CameraGuestListResponse": {
        "type": "object",
        "title": "Camera guests list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all camera guests"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of camera guests",
            "items": {
              "$ref": "#/components/schemas/CameraGuestObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "CameraGuestObject": {
        "type": "object",
        "title": "Guest object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Guest id"
          },
          "first_name": {
            "description": "Guest's first or given name.",
            "nullable": true,
            "type": "string"
          },
          "last_name": {
            "description": "Guest's last or family name.",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Guest's email."
          },
          "permissions": {
            "$ref": "#/components/schemas/CameraGuestPermissionObject"
          }
        },
        "required": [
          "email",
          "permissions"
        ],
        "example": {
          "id": 35,
          "first_name": "Saint",
          "last_name": "Michael",
          "email": "michael@angelcam.com",
          "permisions": {
            "can_view_rec": true,
            "can_create_clips": false,
            "can_view_all_clips": false,
            "share_notifications": false
          }
        }
      },
      "CameraGuestPermissionObject": {
        "type": "object",
        "title": "Guest permission",
        "properties": {
          "can_view_rec": {
            "type": "boolean",
            "description": "The guest can view camera recordings.",
            "x-example": false
          },
          "can_create_clips": {
            "type": "boolean",
            "description": "The guest can create clips and view clips created by themselves. This option also implies `can_view_rec`.",
            "x-example": false
          },
          "can_view_all_clips": {
            "type": "boolean",
            "description": "The guest can view clips created by any user.",
            "x-example": false
          },
          "share_notifications": {
            "type": "boolean",
            "description": "Share RTS notifications for a given camera.",
            "x-example": false
          }
        }
      },
      "CameraListResponse": {
        "type": "object",
        "title": "Camera list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all cameras"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of cameras owned by the user",
            "items": {
              "$ref": "#/components/schemas/CameraObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "CameraObject": {
        "type": "object",
        "title": "Camera object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "description": "Camera ID"
          },
          "name": {
            "type": "string",
            "description": "Camera name"
          },
          "type": {
            "type": "string",
            "enum": [
              "h264",
              "mjpeg"
            ],
            "description": "Camera type"
          },
          "snapshot": {
            "$ref": "#/components/schemas/SnapshotObject"
          },
          "status": {
            "type": "string",
            "enum": [
              "offline",
              "online",
              "unknown"
            ]
          },
          "event_api_hash": {
            "type": "string",
            "description": "Event API hash - unique token for posting events to camera timeline from embedded devices without authentication (do not disclose)"
          },
          "live_snapshot": {
            "format": "uri",
            "description": "Live snapshot URL",
            "nullable": true,
            "type": "string"
          },
          "streams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamObject"
            },
            "description": "Available camera streams. [Read about stream URLs expirations.](http://help.angelcam.com/en/articles/3952149-how-to-deal-with-stream-url-expiration) Please note that the amount of stream consumers per camera is limited to 10 concurrent consumers. Angelcam web app and Angelcam mobile app also count to this limit. Recording is excluded. If you need more concurrent stream consumers, use the broadcasting service."
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationObject"
            }
          },
          "low_latency_enabled": {
            "type": "boolean",
            "description": "Indicates if user enabled [low latency streaming](http://help.angelcam.com/en/articles/372634-enabling-low-latency-streaming) in camera settings."
          },
          "audio_enabled": {
            "type": "boolean",
            "description": "Indicates if audio is enabled for given camera."
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "snapshot",
          "status",
          "live_snapshot",
          "streams",
          "applications",
          "low_latency_enabled",
          "audio_enabled"
        ],
        "example": {
          "id": 157,
          "name": "Parkside Office",
          "type": "h264",
          "snapshot": {
            "url": "https://dsw4ncxjbie85.cloudfront.net/snapshot/81/y8jol6kbn0ol1gh2.jpg",
            "created_at": "2017-03-29T15:41:39.000Z"
          },
          "status": "online",
          "live_snapshot": "http://m1.angelcam.com/stream/81/snapshot.jpg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c",
          "streams": [
            {
              "format": "mjpeg",
              "url": "http://m1.angelcam.com/stream/81/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c",
              "refresh_rate": 0.1
            },
            {
              "format": "mp4",
              "url": "http://m1.angelcam.com/stream/81/stream.mp4?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
            },
            {
              "format": "mpegts",
              "url": "http://m1.angelcam.com/stream/81/stream.ts?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
            },
            {
              "format": "hls",
              "url": "http://m1.angelcam.com/stream/81/playlist.m3u8?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjQwMSwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.8ac35b434e768e8f10161b2d74da492f5fd8a8c115c18cbb421017665acd908a"
            }
          ],
          "applications": [
            "LSA",
            "CRA"
          ],
          "low_latency_enabled": false,
          "audio_enabled": true
        }
      },
      "CameraStartStreamDetectionResponse": {
        "type": "object",
        "title": "Camera Start Stream Detection Response",
        "properties": {
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "session_id"
        ]
      },
      "CameraStreamDetectionPreview": {
        "type": "object",
        "title": "Camera preview",
        "description": "Camera preview that can be used to access the underlying stream in various ways. The preview is available only for 20 minutes.",
        "properties": {
          "live_snapshot": {
            "type": "string",
            "format": "url",
            "description": "A URL that can be used to retrieve a snapshot from the camera"
          },
          "streams": {
            "type": "array",
            "description": "A list of streams available for the preview",
            "items": {
              "$ref": "#/components/schemas/CameraStreamDetectionPreviewStream"
            }
          }
        },
        "required": [
          "live_snapshot",
          "streams"
        ]
      },
      "CameraStreamDetectionPreviewStream": {
        "type": "object",
        "title": "Camera preview stream",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "hls",
              "mjpeg",
              "mp4"
            ],
            "description": "Stream type"
          },
          "url": {
            "type": "string",
            "format": "url",
            "description": "Stream URL"
          }
        },
        "required": [
          "format",
          "url"
        ]
      },
      "CameraStreamDetectionResponse": {
        "type": "object",
        "title": "Camera Result Stream Detection Response",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "in-progress",
              "error"
            ],
            "description": "Result status"
          },
          "streams": {
            "type": "array",
            "description": "A list of detected streams",
            "items": {
              "$ref": "#/components/schemas/CameraStreamDetectionStream"
            }
          },
          "error": {
            "type": "string",
            "description": "Error information"
          }
        },
        "required": [
          "status"
        ],
        "example": {
          "status": "ok",
          "streams": [
            {
              "url": "rtsp://1.2.3.4/main",
              "type": "h264",
              "preview": {
                "live_snapshot": "http://m1.angelcam.com/stream/81/snapshot.jpg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c",
                "streams": [
                  {
                    "format": "mjpeg",
                    "url": "http://m1.angelcam.com/stream/81/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c"
                  },
                  {
                    "format": "mp4",
                    "url": "http://m1.angelcam.com/stream/81/stream.mp4?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
                  },
                  {
                    "format": "hls",
                    "url": "http://m1.angelcam.com/stream/81/playlist.m3u8?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjQwMSwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.8ac35b434e768e8f10161b2d74da492f5fd8a8c115c18cbb421017665acd908a"
                  }
                ]
              }
            }
          ]
        }
      },
      "CameraStreamDetectionStream": {
        "type": "object",
        "title": "Detected stream",
        "properties": {
          "url": {
            "type": "string",
            "format": "url",
            "description": "URL of the detected stream. This is the URL that should be used to create a new camera."
          },
          "type": {
            "type": "string",
            "enum": [
              "h264",
              "mjpeg"
            ],
            "description": "Camera type"
          },
          "preview": {
            "$ref": "#/components/schemas/CameraStreamDetectionPreview"
          }
        },
        "required": [
          "url",
          "type",
          "preview"
        ]
      },
      "ClientListResponse": {
        "type": "object",
        "title": "Client list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of client"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of clients of reseller",
            "items": {
              "$ref": "#/components/schemas/ClientObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "ClientObject": {
        "type": "object",
        "title": "Client object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "description": "Client ID"
          },
          "first_name": {
            "type": "string",
            "description": "Clients first name"
          },
          "last_name": {
            "type": "string",
            "description": "Clients last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Clients email"
          },
          "phone": {
            "description": "Clients phone number",
            "nullable": true,
            "type": "string"
          },
          "invoice_to": {
            "type": "string",
            "enum": [
              "me",
              "client"
            ],
            "description": "All services are invoice to reseller (me) or directly to client."
          },
          "limited_account": {
            "type": "boolean",
            "description": "Limited clients cannot connect new cameras or purchase any services, by themselves.\n"
          },
          "allowed_access": {
            "type": "boolean",
            "description": "This field indicates if reseller can access clients cameras. Defualt is true, but client can refuse access.\n"
          },
          "activated_at": {
            "format": "datetime",
            "description": "Datetime, when client activated their account, or null in a case when the account is not activated yet at all.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "first_name",
          "last_name",
          "email",
          "phone",
          "invoice_to",
          "limited_account",
          "allowed_access",
          "activated_at"
        ],
        "example": {
          "id": 42,
          "first_name": "Joe",
          "last_name": "Parker",
          "email": "joe@angelcam.com",
          "phone": "+1 111 222 333",
          "invoice_to": "client",
          "limited_account": false,
          "allowed_access": true,
          "confiremd_at": null
        }
      },
      "ClipListResponse": {
        "type": "object",
        "title": "Clip list",
        "properties": {
          "count": {
            "type": "integer",
            "minimum": 0,
            "description": "Count of all clips"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of clips for the camera",
            "items": {
              "$ref": "#/components/schemas/ClipObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "example": {
          "count": 10,
          "next": null,
          "previous": null,
          "results": [
            {
              "id": "b9aad334-07ba-4660-9f18-041875ec1ea4",
              "created_by": 1,
              "name": "Frontdoor loitering",
              "status": "READY",
              "sharing_token": "cd13975b-0b08-48f5-bd39-3f7d2a0c935a",
              "start": "2017-01-01T00:00:20.000Z",
              "end": "2017-01-01T00:25:20.000Z",
              "created_at": "2017-02-01T02:37:21.000Z",
              "download_url": "https://rust-streamer-us-west-2-07489f9b03f198b91.angelcam.com/clips/b986b0c8-05c2-4c59-8fdd-8afd7bbfa2bf/download/?start=2019%2D12%2D09T14%3A19%3A59%2B00%3A00&end=2019%2D12%2D09T14%3A20%3A29%2B00%3A00&token=eyJ0aW1lIjoxNTc2NzUyMzY3LCJ0aW1lb3V0IjoxMjAwfQ%3D%3D%2E1c5903efe76af570bea4ef5edf49c39f5afc1ce2c1aaf79e85ad5d140c8c3f42&filename=Frontdoor%20loitering"
            }
          ]
        }
      },
      "ClipObject": {
        "type": "object",
        "title": "Clip object",
        "properties": {
          "id": {
            "type": "string",
            "minimum": 1,
            "description": "Clip UUID"
          },
          "created_by": {
            "type": "integer",
            "description": "User who created the clip"
          },
          "created_at": {
            "type": "string",
            "minimum": 1,
            "description": "Time when the clip was created"
          },
          "name": {
            "type": "string",
            "minimum": 1,
            "description": "Clip name"
          },
          "status": {
            "type": "string",
            "description": "Status of clip processing",
            "enum": [
              "PENDING",
              "BUILDING",
              "READY",
              "ERROR"
            ]
          },
          "start": {
            "type": "string",
            "minimum": 1,
            "description": "Start time of the clip"
          },
          "end": {
            "type": "string",
            "minimum": 1,
            "description": "End time of the clip"
          },
          "sharing_token": {
            "type": "string",
            "description": "Security token for sharing the clip without authentication (UUID)"
          },
          "download_url": {
            "type": "string",
            "description": "URL for download of the clip as TS/MP4 file (TS for HLS cameras, MP4 for MJPEG cameras). The URL contains security token valid for a limited time."
          }
        },
        "required": [
          "id",
          "created_by",
          "created_at",
          "download_url",
          "end",
          "name",
          "sharing_token",
          "start",
          "status"
        ],
        "example": {
          "id": "b9aad334-07ba-4660-9f18-041875ec1ea4",
          "created_by": 1,
          "name": "Frontdoor loitering",
          "status": "READY",
          "sharing_token": "cd13975b-0b08-48f5-bd39-3f7d2a0c935a",
          "start": "2017-01-01T00:00:20.000Z",
          "end": "2017-01-01T00:25:20.000Z",
          "created_at": "2017-02-01T02:37:21.000Z",
          "download_url": "https://rust-streamer-us-west-2-07489f9b03f198b91.angelcam.com/clips/b986b0c8-05c2-4c59-8fdd-8afd7bbfa2bf/download/?start=2019%2D12%2D09T14%3A19%3A59%2B00%3A00&end=2019%2D12%2D09T14%3A20%3A29%2B00%3A00&token=eyJ0aW1lIjoxNTc2NzUyMzY3LCJ0aW1lb3V0IjoxMjAwfQ%3D%3D%2E1c5903efe76af570bea4ef5edf49c39f5afc1ce2c1aaf79e85ad5d140c8c3f42&filename=Frontdoor%20loitering"
        }
      },
      "Error400Invalid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorGeneric"
          }
        ],
        "title": "Error 400 Bad Request",
        "example": {
          "title": "invalid",
          "detail": "Invalid hash",
          "status": 400
        }
      },
      "Error400InvalidParams": {
        "type": "object",
        "title": "Error 400 Invalid Parameters",
        "properties": {
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "object"
          },
          "status": {
            "type": "integer"
          }
        },
        "required": [
          "title",
          "detail",
          "status"
        ],
        "example": {
          "title": "invalid",
          "detail": [
            {
              "refresh_rate": [
                "valid number is required.",
                "Ensure this value is greater than 0."
              ]
            },
            {
              "max_width": [
                "valid number is required.",
                "Ensure this value is greater than or equal to 1."
              ]
            }
          ],
          "status": 400
        }
      },
      "Error401Unauthorized": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorGeneric"
          }
        ],
        "title": "Error 401 Unauthorized",
        "example": {
          "title": "not_authenticated",
          "detail": "Authentication credentials were not provided",
          "status": 401
        }
      },
      "Error403PermissionDenied": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorGeneric"
          }
        ],
        "title": "Error 403 Permission Denied",
        "example": {
          "title": "permission_denied",
          "detail": "You do not have permission to perform this action.",
          "status": 403
        }
      },
      "Error404NotFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorGeneric"
          }
        ],
        "title": "Error 404 Not Found",
        "example": {
          "title": "not_found",
          "detail": "Not Found",
          "status": 404
        }
      },
      "Error429TooManyRequests": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorGeneric"
          }
        ],
        "title": "Error 429 Too Many Requests",
        "example": {
          "title": "rate_limited",
          "detail": "The rate limit has been reached",
          "status": 429
        }
      },
      "Error502BadGateway": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorGeneric"
          }
        ],
        "title": "Error 502 Bad Gateway",
        "example": {
          "title": "bad_gateway",
          "detail": "Bad Gateway",
          "status": 502
        }
      },
      "ErrorGeneric": {
        "type": "object",
        "title": "Error object",
        "properties": {
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          }
        },
        "required": [
          "title",
          "detail",
          "status"
        ]
      },
      "EventListResponse": {
        "type": "object",
        "title": "Event list",
        "properties": {
          "count": {
            "type": "integer",
            "minimum": 0,
            "description": "Count of all events"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "description": "Previous page from pagination",
            "nullable": true
          },
          "results": {
            "type": "array",
            "description": "List of events owned by the user",
            "items": {
              "$ref": "#/components/schemas/EventObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "EventObject": {
        "type": "object",
        "title": "Event object",
        "properties": {
          "camera": {
            "description": "Camera ID",
            "nullable": true,
            "type": "integer"
          },
          "site": {
            "description": "Site ID",
            "nullable": true,
            "type": "integer"
          },
          "title": {
            "description": "Event title",
            "nullable": true,
            "type": "string"
          },
          "category": {
            "type": "string",
            "description": "event category"
          },
          "source": {
            "type": "string",
            "description": "Name of event source"
          },
          "occurred_at": {
            "type": "string",
            "format": "datetime",
            "description": "Time when event occurred or was received by Angelcam"
          },
          "received_at": {
            "type": "string",
            "format": "datetime",
            "description": "Time when event was received by Angelcam"
          }
        },
        "required": [
          "camera",
          "site",
          "title",
          "category",
          "source",
          "received_at",
          "occurred_at"
        ],
        "example": {
          "title": "Door open",
          "camera": 20,
          "site": null,
          "source": "smtp",
          "category": "motion_detected",
          "received_at": "2018-10-24T11:21:59.000Z",
          "occurred_at": "2018-10-24T11:21:39.000Z"
        }
      },
      "MessageListResponse": {
        "type": "object",
        "title": "Message list",
        "properties": {
          "count": {
            "type": "integer",
            "minimum": 0,
            "description": "Count of all messages"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of messages",
            "items": {
              "$ref": "#/components/schemas/MessageObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "example": {
          "count": 10,
          "next": null,
          "previous": null,
          "results": [
            {
              "id": 1,
              "created_at": "2019-08-09T13:23:23.000Z",
              "title": "Sensor My Sensor detected motion",
              "short_message": "Your sensor with name My Sensor detected motion.",
              "long_message": "Your sensor with name My Sensor detected motion. Find out more at <url>.",
              "is_read": false,
              "image": "https://s3.us-west-2.amazonaws.com/rec-prod.us-west-2.angelcam.com/c/944c8ee2-0230-4dbf-b03d-de09dc4a79da.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJ6CMNV7APGJB5JYQ%2F20180416%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180416T093432Z&X-Amz-Expires=86400&X-Amz-Signature=40b3701f85114ed22f76a97e6b0c099b1dc7301645bd2db8380c5fa824c59455&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3D%22Frontdoor%20loitering.jpg%22",
              "action_url": "https://my.angelcam.com/camera/1/",
              "action_label": "Show camera",
              "show_detail": false
            }
          ]
        }
      },
      "MessageObject": {
        "type": "object",
        "title": "Message object",
        "properties": {
          "id": {
            "type": "number",
            "minimum": 1,
            "description": "Message ID"
          },
          "created_at": {
            "type": "string",
            "description": "Time when message was created, format `%Y-%m-%dT%H:%M:%SZ`"
          },
          "title": {
            "type": "string",
            "description": "Message title"
          },
          "type": {
            "type": "string",
            "description": "Message type. Can be used to decide for instance priority of the message.",
            "enum": [
              "my_incident",
              "shared_incident",
              "arming",
              "other"
            ]
          },
          "short_message": {
            "type": "string",
            "description": "Short version of message. Use short version for example in notification list"
          },
          "long_message": {
            "type": "string",
            "description": "More detailed version of message. Use long version in message detail or when sending via e-mail."
          },
          "is_read": {
            "type": "boolean",
            "description": "Whether message was read by user."
          },
          "read_at": {
            "type": "string",
            "description": "Time when message was read, format `%Y-%m-%dT%H:%M:%SZ`"
          },
          "image": {
            "type": "string",
            "description": "URL of image that is related to the message."
          },
          "action_url": {
            "type": "string",
            "description": "URL to a particular screen in webapp or mobile app that is related to this message. Required when `show_detail == false`"
          },
          "action_label": {
            "type": "string",
            "description": "Label for button that should redirect to action_url"
          },
          "show_detail": {
            "type": "boolean",
            "description": "Whether to show detail of message or redirect user directly to `action_url`"
          },
          "incident_sharing_url": {
            "type": "string",
            "description": "URL that can be used for incident verification by third parties. The URL leads to a web page where all cameras from the affected site can be viewed (live streams + the last two hours of recording). The URL is valid for one hour after the corresponding incident is created. This field will be `null` if the message type isn't `my_incident` or if the URL is no longer valid."
          }
        },
        "required": [
          "id",
          "created_at",
          "title",
          "type",
          "is_read",
          "short_message",
          "long_message",
          "show_detail"
        ],
        "example": {
          "id": 1,
          "created_at": "2019-08-09T13:23:23.000Z",
          "title": "Sensor My Sensor detected motion",
          "type": "my_incident",
          "short_message": "Your sensor with name My Sensor detected motion.",
          "long_message": "Your sensor with name My Sensor detected motion. Find out more at <url>.",
          "is_read": false,
          "read_at": "2019-08-09T13:23:30.000Z",
          "image": "https://s3.us-west-2.amazonaws.com/rec-prod.us-west-2.angelcam.com/c/944c8ee2-0230-4dbf-b03d-de09dc4a79da.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJ6CMNV7APGJB5JYQ%2F20180416%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180416T093432Z&X-Amz-Expires=86400&X-Amz-Signature=40b3701f85114ed22f76a97e6b0c099b1dc7301645bd2db8380c5fa824c59455&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3D%22Frontdoor%20loitering.jpg%22",
          "action_url": "https://my.angelcam.com/camera/1/",
          "action_label": "Show camera",
          "show_detail": false,
          "incident_sharing_url": null
        }
      },
      "OrderItemListResponse": {
        "type": "object",
        "title": "Order list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all services"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of orders",
            "items": {
              "$ref": "#/components/schemas/OrderItemObject"
            }
          }
        }
      },
      "OrderItemObject": {
        "type": "object",
        "title": "Order item object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/ServiceObject"
          },
          "period_from": {
            "type": "string",
            "format": "datetime",
            "example": "2017-01-01T00:00:20.000Z"
          },
          "period_until": {
            "type": "string",
            "nullable": true,
            "format": "datetime",
            "example": "2017-02-01T00:00:20.000Z"
          },
          "full_price": {
            "type": "string",
            "format": "number",
            "description": "Decimal price in USD",
            "example": 3.99
          },
          "price": {
            "type": "string",
            "format": "number",
            "description": "Decimal price in USD",
            "example": 3.99
          },
          "type": {
            "type": "string",
            "description": "Type of item",
            "enum": [
              "receivable",
              "refund"
            ]
          }
        }
      },
      "OrderListResponse": {
        "type": "object",
        "title": "Order list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all services"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of orders",
            "items": {
              "$ref": "#/components/schemas/OrderObject"
            }
          }
        }
      },
      "OrderObject": {
        "type": "object",
        "title": "Order object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Order id",
            "example": 1
          },
          "closed_at": {
            "type": "string",
            "format": "datetime",
            "description": "Date when order was closed",
            "example": "2017-01-01T00:00:20.000Z"
          },
          "paid_at": {
            "type": "string",
            "nullable": true,
            "format": "datetime",
            "description": "Date when order was paid",
            "example": "2017-01-01T00:00:20.000Z"
          },
          "due_at": {
            "type": "string",
            "nullable": true,
            "format": "datetime",
            "description": "Date when order is due",
            "example": "2017-01-01T00:00:20.000Z"
          },
          "total_price": {
            "type": "string",
            "format": "number",
            "description": "Decimal price in USD",
            "example": 3.99
          },
          "state": {
            "type": "string",
            "description": "Status of an order",
            "enum": [
              "purchase",
              "unpaid",
              "pending-payment",
              "canceled",
              "paid"
            ]
          }
        }
      },
      "OwnerObject": {
        "type": "object",
        "title": "Owner object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "User's first or given name."
          },
          "last_name": {
            "type": "string",
            "description": "User's last or family name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email."
          }
        },
        "required": [
          "email"
        ],
        "example": {
          "first_name": "John",
          "last_name": "Appleseed",
          "email": "john@apple.com"
        }
      },
      "PriceObject": {
        "type": "object",
        "title": "Price object",
        "properties": {
          "period": {
            "type": "string",
            "format": "duration",
            "description": "Period of time",
            "example": "P1M"
          },
          "price": {
            "type": "string",
            "format": "number",
            "description": "Decimal price in USD",
            "example": 3.99
          }
        }
      },
      "PublicCameraListResponse": {
        "type": "object",
        "title": "Public Camera list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all public cameras"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of public cameras",
            "items": {
              "$ref": "#/components/schemas/PublicCameraObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "PublicCameraObject": {
        "type": "object",
        "title": "Public camera object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "description": "Camera ID"
          },
          "name": {
            "type": "string",
            "description": "Camera name"
          },
          "type": {
            "type": "string",
            "enum": [
              "h264",
              "mjpeg"
            ],
            "description": "Camera type"
          },
          "status": {
            "type": "string",
            "enum": [
              "offline",
              "online",
              "unknown"
            ]
          },
          "live_snapshot": {
            "format": "uri",
            "description": "Live snapshot URL",
            "nullable": true,
            "type": "string"
          },
          "public_page_url": {
            "format": "uri",
            "description": "Public page URL",
            "nullable": true,
            "type": "string"
          },
          "streams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamObject"
            },
            "description": "Available broadcasting streams. [Read about stream URLs expirations.](http://help.angelcam.com/en/articles/3952149-how-to-deal-with-stream-url-expiration)"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "status",
          "live_snapshot",
          "public_page_url",
          "streams"
        ],
        "example": {
          "id": 157,
          "name": "Parkside Office",
          "type": "h264",
          "status": "online",
          "live_snapshot": "http://m1.angelcam.com/stream/81/snapshot.jpg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c",
          "public_page_url": "https://some.url/camera/4564",
          "streams": [
            {
              "format": "mjpeg",
              "url": "http://e1.angelcam.com/stream/81/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c"
            },
            {
              "format": "mp4",
              "url": "http://e1.angelcam.com/stream/81/stream.mp4?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
            },
            {
              "format": "mpegts",
              "url": "http://e1.angelcam.com/stream/81/stream.ts?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
            },
            {
              "format": "hls",
              "url": "http://e1.angelcam.com/stream/81/playlist.m3u8?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjQwMSwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.8ac35b434e768e8f10161b2d74da492f5fd8a8c115c18cbb421017665acd908a"
            }
          ]
        }
      },
      "RecordingDownloadResponse": {
        "type": "object",
        "title": "Recording download",
        "properties": {
          "url": {
            "type": "string",
            "format": "url",
            "description": "Download URL"
          }
        },
        "example": {
          "url": "https://rust-streamer-eu-central-1-07489f9b03f198b91.angelcam.com/recordings/7e65d945-fffc-42e7-b78d-dd6f5cea91ee/download/?start=2019%2D09%2D30T07%3A23%3A14%2E932%2B00%3A00&end=2019%2D09%2D30T07%3A53%3A57%2E016%2B00%3A00&token=eyJ0aW1lIjoxNTY5ODU3NjgzLCJ0aW1lb3V0IjoxMjAwfQ%3D%3D%2E020b136d5da0d9518ed5428bfa01cadab1a139bf1e4f8e64a726fe3dfd40e541&filename=clip"
        }
      },
      "RecordingPlanObject": {
        "type": "object",
        "title": "Recording plan description",
        "properties": {
          "code": {
            "type": "string",
            "description": "Plan identifier"
          },
          "retention": {
            "type": "string",
            "description": "Recording retention"
          },
          "price": {
            "type": "string",
            "format": "decimal",
            "description": "Price of the plan"
          },
          "billing_period": {
            "type": "string",
            "enum": [
              "month",
              "year"
            ],
            "description": "It specifies a time period for the price field. The purpose of this field is just to fix the cost\nin time. It does not necessarily mean that the price will be charged every billing period.\n"
          }
        },
        "required": [
          "code",
          "retention",
          "price",
          "billing_period"
        ],
        "example": {
          "code": "cra-3days-monthly-v2",
          "retention": "P3D",
          "price": "3.99",
          "billing_period": "month"
        }
      },
      "RecordingPlansResponse": {
        "type": "object",
        "title": "Recording plans",
        "properties": {
          "count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of all plans"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "A list of recording plans",
            "items": {
              "$ref": "#/components/schemas/RecordingPlanObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "example": {
          "count": 16,
          "next": null,
          "previous": null,
          "results": [
            {
              "code": "cra-3days-monthly-v2",
              "retention": "P3D",
              "price": "3.99",
              "billing_period": "month"
            },
            {
              "code": "cra-7days-monthly-v2",
              "retention": "P7D",
              "price": "5.99",
              "billing_period": "month"
            },
            {
              "code": "cra-30days-monthly-v2",
              "retention": "P30D",
              "price": "13.99",
              "billing_period": "month"
            },
            {
              "code": "cra-60days-monthly-v2",
              "retention": "P60D",
              "price": "18.99",
              "billing_period": "month"
            },
            {
              "code": "cra-3months-monthly-v2",
              "retention": "P90D",
              "price": "24.99",
              "billing_period": "month"
            },
            {
              "code": "cra-6months-monthly-v2",
              "retention": "P180D",
              "price": "39.99",
              "billing_period": "month"
            },
            {
              "code": "cra-3days-yearly-v2",
              "retention": "P3D",
              "price": "47.88",
              "billing_period": "year"
            },
            {
              "code": "cra-1year-monthly-v2",
              "retention": "P365D",
              "price": "69.99",
              "billing_period": "month"
            },
            {
              "code": "cra-7days-yearly-v2",
              "retention": "P7D",
              "price": "71.88",
              "billing_period": "year"
            },
            {
              "code": "cra-2years-monthly-v2",
              "retention": "P730D",
              "price": "129.99",
              "billing_period": "month"
            },
            {
              "code": "cra-30days-yearly-v2",
              "retention": "P30D",
              "price": "167.88",
              "billing_period": "year"
            },
            {
              "code": "cra-60days-yearly-v2",
              "retention": "P60D",
              "price": "227.88",
              "billing_period": "year"
            },
            {
              "code": "cra-3months-yearly-v2",
              "retention": "P90D",
              "price": "299.88",
              "billing_period": "year"
            },
            {
              "code": "cra-6months-yearly-v2",
              "retention": "P180D",
              "price": "479.88",
              "billing_period": "year"
            },
            {
              "code": "cra-1year-yearly-v2",
              "retention": "P365D",
              "price": "839.88",
              "billing_period": "year"
            },
            {
              "code": "cra-2years-yearly-v2",
              "retention": "P730D",
              "price": "1559.88",
              "billing_period": "year"
            }
          ]
        }
      },
      "RecordingResponse": {
        "type": "object",
        "title": "Recording information",
        "required": [
          "status",
          "retention",
          "deactivated_at"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "READY",
              "CONNECTING",
              "RECORDING",
              "STOPPING",
              "ERROR"
            ],
            "description": "Recording status values have the following meaning:\n* `READY` - Not recording (recording is ready to be started)\n* `CONNECTING` - Recorder is trying to connect to the stream (this usually indicates camera connectivity problems; the recorder keeps trying to connect).\n* `RECORDING` - Recorder is connected to the stream and records are being created\n* `STOPPING` - Recording is stopping\n* `ERROR` - Error occurred when recording (this indicates a possible issue with Angelcam infrastructure)\n"
          },
          "retention": {
            "description": "Retention period in ISO 8601 duration format tells how long in past we store the footage. Example: P7D means 7 days.\n",
            "nullable": true,
            "type": "string"
          },
          "deactivated_at": {
            "type": "string",
            "format": "datetime",
            "nullable": true,
            "description": "Datetime when recording service has been deactivated, if null then recording is active."
          }
        },
        "example": {
          "status": "RECORDING",
          "retention": "P7D",
          "deactivated_at": null
        }
      },
      "RecordingStreamInfoResponse": {
        "type": "object",
        "title": "Recording stream information",
        "properties": {
          "current_time": {
            "type": "string",
            "format": "date-time",
            "description": "Current time in a stream."
          }
        },
        "example": {
          "current_time": "2017-01-01T00:00:00.000Z"
        }
      },
      "RecordingStreamResponse": {
        "type": "object",
        "title": "Recording stream object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of a stream.",
            "example": "https://rec-streamer-eu-central-1.angelcam.com/streams/cefa6471a38f469585b46675fc992614/playlist.m3u8\n"
          },
          "format": {
            "type": "string",
            "enum": [
              "hls",
              "fmp4",
              "mjpeg"
            ],
            "description": "Stream format.",
            "example": "hls"
          },
          "stream_info": {
            "type": "string",
            "description": "URL of a recorded stream info endpoint.",
            "example": "https://api.angelcam.com/v1/recording/stream/rec-streamer-eu-central-1/cefa6471a38f469585b46675fc992614/"
          }
        },
        "example": {
          "url": "https://rec-streamer-eu-central-1.angelcam.com/streams/df0600b7487a44d480217db7713720d3/playlist.m3u8",
          "format": "hls",
          "stream_info": "https://api.angelcam.com/v1/recording/stream/rec-streamer-eu-central-1/df0600b7487a44d480217db7713720d3/"
        }
      },
      "RecordingTimelineResponse": {
        "type": "object",
        "title": "Recording timeline object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "Start time of timeline (the value you entered in the query parameter). Example: `2017-01-01T00:00:00Z`.\n"
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "description": "End time of timeline (the value you entered in the query parameter). Example: `2017-01-01T00:00:00Z`.\n"
          },
          "segments": {
            "type": "array",
            "description": "Array of recording segments.",
            "items": {
              "$ref": "#/components/schemas/SegmentObject"
            }
          }
        },
        "example": {
          "start": "2017-01-01T00:00:00.000Z",
          "end": "2017-01-01T03:32:19.000Z",
          "segments": [
            {
              "start": "2017-06-09T00:00:18.000Z",
              "end": "2017-06-09T03:25:28.000Z"
            },
            {
              "start": "2017-06-09T04:19:42.000Z",
              "end": "2017-06-09T010:39:31Z"
            }
          ]
        }
      },
      "RTSSettingsObject": {
        "type": "object",
        "title": "RTS Settings object",
        "properties": {
          "incident_ttl": {
            "type": "string",
            "enum": [
              "PT1M",
              "PT3M",
              "PT5M",
              "PT10M",
              "PT30M",
              "PT1H"
            ],
            "description": "ISO 8601 duration format. The value represents the minimal delay between two events triggered by the same sensor that has to pass before Angelcam sends another notification to the user."
          },
          "is_armed": {
            "type": "boolean",
            "description": "If set to `false` user will not reveive any notifications about sensor events"
          }
        },
        "required": [
          "incident_ttl",
          "is_armed"
        ],
        "example": {
          "incident_ttl": "PT1M",
          "is_armed": true
        }
      },
      "SegmentObject": {
        "type": "object",
        "title": "Segment object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "Start of record segment. Example: `2017-01-01T00:00:00Z`."
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "description": "End of record segment. Example: `2017-01-01T00:00:00Z`."
          }
        }
      },
      "SensorListResponse": {
        "type": "object",
        "title": "My sensors list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all sensors"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of sensors owned by the user",
            "items": {
              "$ref": "#/components/schemas/SensorObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "SensorObject": {
        "type": "object",
        "title": "Sensor object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "description": "Sensor ID"
          },
          "user": {
            "type": "integer",
            "minimum": 1,
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "description": "Sensor name"
          },
          "type": {
            "type": "string",
            "enum": [
              "motion",
              "camera_motion",
              "door_window",
              "smoke",
              "fire",
              "glass_break",
              "shock_vibration",
              "water",
              "perimeter_entry"
            ],
            "description": "Sensor type"
          },
          "placement": {
            "type": "string",
            "enum": [
              "indoors",
              "outdoors"
            ],
            "description": "Sensor placement"
          },
          "manufacturer": {
            "type": "string",
            "description": "Sensor manufacturer"
          },
          "model": {
            "type": "string",
            "description": "Sensor model"
          },
          "note": {
            "type": "string",
            "description": "Any note related to sensor"
          },
          "hash": {
            "type": "string",
            "description": "Event API hash (a unique token for each sensor)"
          },
          "email": {
            "type": "string",
            "description": "Unique email address that can be used to receive events from this sensor by Angelcam"
          },
          "enabled": {
            "type": "boolean",
            "description": "Defaults to True. Indicates if sensor is enabled or not. If disabled then all events from this sensor are ignored."
          },
          "override_arming": {
            "type": "boolean",
            "description": "Defaults to False. If enabled, an event received from the sensor will always trigger an incident regardless of the arming settings."
          },
          "camera": {
            "type": "integer",
            "minimum": 1,
            "description": "Camera ID sensor is bind to"
          },
          "enable_cloud_recording_for": {
            "type": "string",
            "format": "duration",
            "enum": [
              "PT30S",
              "PT1M",
              "PT2M",
              "PT5M"
            ],
            "description": "Duration of event Recording triggered by an event from this sensor. This setting is applied only if sensor has an assigned camera with active Cloud Recording."
          },
          "incident_delay": {
            "type": "string",
            "format": "duration",
            "description": "A delay before RTS incident is triggered. If the site is disarmed during this period, no incident is forwarded. However the video from the binded camera is recorded. PT0S means no delay and PT3M is the max."
          },
          "created_at": {
            "type": "string",
            "description": "DateTime when sensor was created"
          },
          "updated_at": {
            "type": "string",
            "description": "DateTime when sensor was last updated"
          },
          "events_count_ifttt": {
            "type": "integer",
            "description": "Total count of events received from this sensor via IFTTT"
          },
          "events_count_email": {
            "type": "integer",
            "description": "Total count of events received from this sensor via email"
          },
          "events_count_api": {
            "type": "integer",
            "description": "Total count of events received from this sensor via API"
          }
        },
        "required": [
          "id",
          "user",
          "name",
          "type",
          "placement",
          "manufacturer",
          "model",
          "note",
          "hash",
          "email",
          "enabled",
          "override_arming",
          "camera",
          "enable_cloud_recording_for",
          "incident_delay",
          "created_at",
          "updated_at",
          "events_count_ifttt",
          "events_count_email",
          "events_count_api"
        ],
        "example": {
          "id": 34,
          "user": 4,
          "name": "Front door sensor",
          "type": "motion",
          "placement": "indoors",
          "manufacturer": "SensorsX",
          "model": "XTF-666",
          "note": "Testing this sensor",
          "hash": "dy3ovys2ol",
          "email": "dy3ovys2ol@angel.cam",
          "enabled": true,
          "override_arming": false,
          "camera": 32,
          "enable_cloud_recording_for": "PT1M",
          "incident_delay": "PT0S",
          "created_at": "2019-09-24T13:16:23.899357+02:00",
          "updated_at": "2019-09-24T13:16:23.899384+02:00",
          "events_count_ifttt": 0,
          "events_count_email": 0,
          "events_count_api": 5
        }
      },
      "ServiceListResponse": {
        "type": "object",
        "title": "Service list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all services"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of services available for user",
            "items": {
              "$ref": "#/components/schemas/ServiceWithPriceObject"
            }
          }
        }
      },
      "ServiceObject": {
        "type": "object",
        "title": "Service object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of service",
            "enum": [
              "account",
              "API",
              "cloud-recording",
              "broadcasting",
              "time-lapse",
              "VVA",
              "VPA"
            ],
            "example": "cloud-recording"
          },
          "code": {
            "type": "string",
            "description": "Code of service, this code together with type is unique identifier of service",
            "example": "3-days"
          },
          "name": {
            "type": "string",
            "description": "Human readable name of service",
            "example": "3 days"
          },
          "description": {
            "type": "string",
            "description": "Description of service",
            "example": "24x7 cloud recording with 3 days retention"
          }
        }
      },
      "ServiceWithPriceObject": {
        "type": "object",
        "title": "Service object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of service",
            "enum": [
              "account",
              "API",
              "cloud-recording",
              "broadcasting",
              "time-lapse",
              "VVA",
              "VPA"
            ],
            "example": "cloud-recording"
          },
          "code": {
            "type": "string",
            "description": "Code of service, this code together with type is unique identifier of service",
            "example": "3-days"
          },
          "name": {
            "type": "string",
            "description": "Human readable name of service",
            "example": "3 days"
          },
          "description": {
            "type": "string",
            "description": "Description of service",
            "example": "24x7 cloud recording with 3 days retention"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceObject"
            },
            "description": "Service prices"
          }
        }
      },
      "SharedApplicationObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "CRA"
            ]
          }
        },
        "required": [
          "code"
        ],
        "example": {
          "code": "CRA"
        }
      },
      "SharedCameraClipListResponse": {
        "type": "object",
        "title": "Clip list",
        "properties": {
          "count": {
            "type": "integer",
            "minimum": 0,
            "description": "Count of all clips"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of clips for the camera",
            "items": {
              "$ref": "#/components/schemas/SharedCameraClipObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "example": {
          "count": 10,
          "next": null,
          "previous": null,
          "results": [
            {
              "id": "b9aad334-07ba-4660-9f18-041875ec1ea4",
              "created_by": 1,
              "name": "Frontdoor loitering",
              "status": "READY",
              "start": "2017-01-01T00:00:20.000Z",
              "end": "2017-01-01T00:25:20.000Z",
              "created_at": "2017-02-01T02:37:21.000Z",
              "download_url": "https://rust-streamer-us-west-2-07489f9b03f198b91.angelcam.com/clips/b986b0c8-05c2-4c59-8fdd-8afd7bbfa2bf/download/?start=2019%2D12%2D09T14%3A19%3A59%2B00%3A00&end=2019%2D12%2D09T14%3A20%3A29%2B00%3A00&token=eyJ0aW1lIjoxNTc2NzUyMzY3LCJ0aW1lb3V0IjoxMjAwfQ%3D%3D%2E1c5903efe76af570bea4ef5edf49c39f5afc1ce2c1aaf79e85ad5d140c8c3f42&filename=Frontdoor%20loitering"
            }
          ]
        }
      },
      "SharedCameraClipObject": {
        "type": "object",
        "title": "Clip object",
        "properties": {
          "id": {
            "type": "string",
            "minimum": 1,
            "description": "Clip UUID"
          },
          "created_by": {
            "type": "integer",
            "description": "User who created the clip"
          },
          "created_at": {
            "type": "string",
            "minimum": 1,
            "description": "Time when the clip was created"
          },
          "name": {
            "type": "string",
            "minimum": 1,
            "description": "Clip name"
          },
          "status": {
            "type": "string",
            "description": "Status of clip processing",
            "enum": [
              "PENDING",
              "BUILDING",
              "READY",
              "ERROR"
            ]
          },
          "start": {
            "type": "string",
            "minimum": 1,
            "description": "Start time of the clip"
          },
          "end": {
            "type": "string",
            "minimum": 1,
            "description": "End time of the clip"
          },
          "download_url": {
            "type": "string",
            "description": "URL for download of the clip as TS/MP4 file (TS for HLS cameras, MP4 for MJPEG cameras). The URL contains security token valid for a limited time."
          }
        },
        "required": [
          "id",
          "created_by",
          "created_at",
          "download_url",
          "end",
          "name",
          "start",
          "status"
        ],
        "example": {
          "id": "b9aad334-07ba-4660-9f18-041875ec1ea4",
          "created_by": 1,
          "name": "Frontdoor loitering",
          "status": "READY",
          "start": "2017-01-01T00:00:20.000Z",
          "end": "2017-01-01T00:25:20.000Z",
          "created_at": "2017-02-01T02:37:21.000Z",
          "download_url": "https://rust-streamer-us-west-2-07489f9b03f198b91.angelcam.com/clips/b986b0c8-05c2-4c59-8fdd-8afd7bbfa2bf/download/?start=2019%2D12%2D09T14%3A19%3A59%2B00%3A00&end=2019%2D12%2D09T14%3A20%3A29%2B00%3A00&token=eyJ0aW1lIjoxNTc2NzUyMzY3LCJ0aW1lb3V0IjoxMjAwfQ%3D%3D%2E1c5903efe76af570bea4ef5edf49c39f5afc1ce2c1aaf79e85ad5d140c8c3f42&filename=Frontdoor%20loitering"
        }
      },
      "SharedCameraListResponse": {
        "type": "object",
        "title": "Shared Camera list",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of all shared cameras"
          },
          "next": {
            "format": "uri",
            "description": "Next page from pagination",
            "nullable": true,
            "type": "string"
          },
          "previous": {
            "format": "uri",
            "description": "Previous page from pagination",
            "nullable": true,
            "type": "string"
          },
          "results": {
            "type": "array",
            "description": "List of cameras shared with the user",
            "items": {
              "$ref": "#/components/schemas/SharedCameraObject"
            }
          }
        },
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ]
      },
      "SharedCameraObject": {
        "type": "object",
        "title": "Shared camera object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "description": "Camera ID"
          },
          "name": {
            "type": "string",
            "description": "Camera name"
          },
          "type": {
            "type": "string",
            "enum": [
              "h264",
              "mjpeg"
            ],
            "description": "Camera type"
          },
          "snapshot": {
            "$ref": "#/components/schemas/SnapshotObject"
          },
          "status": {
            "type": "string",
            "enum": [
              "offline",
              "online",
              "unknown"
            ]
          },
          "live_snapshot": {
            "format": "uri",
            "description": "Live snapshot URL",
            "nullable": true,
            "type": "string"
          },
          "streams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamObject"
            },
            "description": "Available camera streams"
          },
          "applications": {
            "type": "array",
            "deprecated": true,
            "description": "Use `has_recording` and `has_notifications` fields",
            "items": {
              "$ref": "#/components/schemas/SharedApplicationObject"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerObject"
          },
          "has_recording": {
            "type": "boolean",
            "description": "Indicates whether the user to whom the camera is shared can access camera recordings"
          },
          "has_notifications": {
            "type": "boolean",
            "description": "Indicates whether the user to whom the camera is shared will receive notifications (eg. security alerts) related to the camera"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "snapshot",
          "status",
          "live_snapshot",
          "streams",
          "applications",
          "owner",
          "has_recording",
          "has_notifications"
        ],
        "example": {
          "id": 157,
          "name": "Parkside Office",
          "type": "h264",
          "snapshot": {
            "url": "https://dsw4ncxjbie85.cloudfront.net/snapshot/81/y8jol6kbn0ol1gh2.jpg",
            "created_at": "2017-03-29T15:41:39.000Z"
          },
          "status": "online",
          "live_snapshot": "http://m1.angelcam.com/stream/81/snapshot.jpg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c",
          "streams": [
            {
              "format": "mjpeg",
              "url": "http://m1.angelcam.com/stream/81/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c",
              "refresh_rate": 0.1
            },
            {
              "format": "mp4",
              "url": "http://m1.angelcam.com/stream/81/stream.mp4?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
            },
            {
              "format": "hls",
              "url": "http://m1.angelcam.com/stream/81/playlist.m3u8?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjQwMSwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.8ac35b434e768e8f10161b2d74da492f5fd8a8c115c18cbb421017665acd908a"
            }
          ],
          "applications": [
            "CRA"
          ],
          "owner": {
            "email": "john@apple.com",
            "first_name": "John",
            "last_name": "Appleseed"
          },
          "has_recording": false,
          "has_notifications": true
        }
      },
      "SiteCameraList": {
        "type": "array",
        "description": "List of cameras on site",
        "items": {
          "$ref": "#/components/schemas/CameraObject"
        }
      },
      "SiteObject": {
        "type": "object",
        "title": "Site object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "description": "Site ID"
          },
          "name": {
            "type": "string",
            "description": "Site name",
            "example": "Bedroom"
          },
          "is_armed": {
            "type": "boolean",
            "description": "If site is not armed user will not get notifications when something happens."
          },
          "cameras": {
            "$ref": "#/components/schemas/SiteCameraList"
          },
          "parent": {
            "minimum": 1,
            "description": "Parent site ID. If value is `null` it means that current object is root site.",
            "nullable": true,
            "type": "integer"
          },
          "children": {
            "type": "array",
            "description": "Children sites IDs",
            "items": {
              "type": "integer",
              "minimum": 1
            },
            "example": [
              2,
              3
            ]
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SnapshotObject": {
        "title": "Snapshot object",
        "properties": {
          "url": {
            "format": "uri",
            "description": "URL of the snapshot image",
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the snapshot was created for the first time"
          }
        },
        "required": [
          "url",
          "created_at"
        ],
        "example": {
          "url": "https://dsw4ncxjbie85.cloudfront.net/snapshot/157/h8yeodu1mrjtiiok.jpg",
          "created_at": "2017-03-31T12:29:10.000Z"
        },
        "description": "Snapshot is created by Angelcam when certain types of events are received",
        "nullable": true,
        "type": "object"
      },
      "StreamObject": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Stream URL"
          },
          "format": {
            "type": "string",
            "enum": [
              "hls",
              "fmp4",
              "mpegts",
              "mjpeg"
            ]
          },
          "refresh_rate": {
            "type": "number",
            "format": "float",
            "description": "Stream refresh rate"
          }
        },
        "required": [
          "url",
          "format"
        ],
        "example": {
          "url": "http://m2-eu1.angelcam.com/stream/157/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE4Mjc3OCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiMTU3In0%3D.d365e2a6fbdfae0bfa5b27175a6ea57de1ae31844fdcd22ff5f56da10a970d65",
          "format": "mjpeg"
        }
      },
      "UserMeResponse": {
        "type": "object",
        "title": "User object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "description": "User ID."
          },
          "first_name": {
            "type": "string",
            "description": "User's first or given name."
          },
          "last_name": {
            "type": "string",
            "description": "User's last or family name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email."
          },
          "phone": {
            "description": "User's phone.",
            "nullable": true,
            "type": "string"
          },
          "root_site": {
            "type": "integer",
            "minimum": 1,
            "description": "Root site ID for current user"
          },
          "my_cameras_count": {
            "type": "integer",
            "description": "Count of user cameras"
          },
          "shared_cameras_count": {
            "type": "integer",
            "description": "Count of cameras shared with user"
          },
          "total_cameras_count": {
            "type": "integer",
            "description": "Sum of count of user cameras + cameras shared with user"
          },
          "cameras_with_guests_count": {
            "type": "integer",
            "description": "Count of user cameras that have been shared with others"
          },
          "require_qualification": {
            "type": "boolean",
            "description": "true if the user hasn't filled in the qualification form, false otherwise"
          },
          "available_features": {
            "type": "object",
            "description": "Features available to the user",
            "properties": {
              "live_view": {
                "type": "boolean",
                "description": "true if the live-view feature is available to the user, false otherwise"
              }
            }
          }
        },
        "required": [
          "id",
          "email"
        ],
        "example": {
          "id": 2929,
          "first_name": "John",
          "last_name": "Appleseed",
          "email": "john@apple.com",
          "phone": "+123 558 951 14",
          "root_site": 1,
          "my_cameras_count": 3,
          "shared_cameras_count": 2,
          "total_cameras_count": 5,
          "cameras_with_guests_count": 1,
          "require_qualification": false,
          "available_features": {
            "live_view": true
          }
        }
      }
    },
    "responses": {
      "EmptyResponse": {
        "description": "Empty response"
      },
      "Error400InvalidBody": {
        "description": "Body payload is invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error400InvalidParams"
            }
          }
        }
      },
      "Error400InvalidParams": {
        "description": "Query params are invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error400InvalidParams"
            }
          }
        }
      },
      "Error401Unauthorized": {
        "description": "Missing or invalid authorization.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error401Unauthorized"
            }
          }
        }
      },
      "Error403PermissionDenied": {
        "description": "Missing permission.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error403PermissionDenied"
            }
          }
        }
      },
      "Error404NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error404NotFound"
            }
          }
        }
      },
      "Error502BadGateway": {
        "description": "Unable to contact the target gateway.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error502BadGateway"
            }
          }
        }
      }
    },
    "parameters": {
      "activeServiceId": {
        "name": "active_service_id",
        "in": "path",
        "required": true,
        "description": "Active service ID",
        "example": 3,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "arrowClientId": {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Arrow client UUID",
        "example": "c95227c4-218c-4dee-899d-f3fa2ce9c39b",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "cameraId": {
        "name": "camera_id",
        "in": "path",
        "required": true,
        "description": "Camera ID",
        "example": 3,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "clientDeviceId": {
        "name": "device_id",
        "in": "path",
        "required": true,
        "description": "Device ID",
        "example": 1,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "clientId": {
        "name": "client_id",
        "in": "path",
        "required": true,
        "description": "Client ID",
        "example": 6,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "clipId": {
        "name": "clip_id",
        "in": "path",
        "required": true,
        "description": "Clip UUID",
        "example": "cd13975b-0b08-48f5-bd39-3f7d2a0c935a",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "guestId": {
        "name": "guest_id",
        "in": "path",
        "required": true,
        "description": "Guest ID",
        "example": 4,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "messageId": {
        "name": "message_id",
        "in": "path",
        "required": true,
        "description": "Message ID",
        "example": 3,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "orderId": {
        "name": "order_id",
        "in": "path",
        "required": true,
        "description": "Order ID",
        "example": 3,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "sensorId": {
        "name": "sensor_id",
        "in": "path",
        "required": true,
        "description": "Sensor ID",
        "example": 3,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "sessionId": {
        "name": "session_id",
        "in": "path",
        "required": true,
        "description": "`session_id` that you received from [start stream detection endpoint](/#operation/stream-detection-start)\n",
        "example": "c95227c4-218c-4dee-899d-f3fa2ce9c39b",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "sharedCameraId": {
        "name": "camera_id",
        "in": "path",
        "required": true,
        "description": "Camera ID",
        "example": 21,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "siteId": {
        "name": "site_id",
        "in": "path",
        "required": true,
        "description": "Site ID",
        "example": 1,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      }
    },
    "headers": {
      "ExpiresAfter": {
        "description": "date in UTC when token expires",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "description": "\nFor OAuth2 we support two different authentication workflows (_grant types_\n   in terms of OAuth):\n\n\n   * You ask your users for their Angelcam usernames and passwords (_resource\n   owner password-based_ in terms of OAuth)\n\n   * You ask Angelcam and we authenticate your users, similar to how Google or\n   Facebook works if you choose \"Sign-in using\n     Google/Facebook\" (_authorization code_ in terms of OAuth)\n\nBoth authentication types result in the same - you exchange username/password or authorization code by calling `/oauth/token/` endpoint for access token. All API calls must supply this access token with `Authorization: Bearer ` as header. For example, with cURL commandline tool, your request would contain something like this:\n\n  ```curl -H \"Authorization: Bearer <Your Access Token>\" -X GET  \"https://api.angelcam.com/v1/cameras/?limit=5\"```\n\nThese access tokens also have a limited-time validity (usually 10 hours) and you’ll have to ask for new access token using refresh token when current access token expires.\n### Obtaining your OAuth2 Client ID and Client Secret\nTo obtain credentials for using OAuth2 please [contact our support](https://www.angelcam.com/support/).\n### Obtaining access token using password grant type\n![Password grant type sequence diagram](./assets/password_grant_type.png)\n\nPassword grant type is a more basic and easier way for authorization, but it is less safe for Angelcam users. With this grant type, it's you who asks for the credentials in the UI and it's your app that calls `oauth/token/` to exchange user credentials for the bearer token.\n\nBe aware! DO NOT save the password or username of any user under any circumstances. To implement a \"Remember me\" checkbox in your app, save the refresh token instead and ask for a new access token whenever the access token expires. You can get a new access token using the refresh token and the `oauth/token/` endpoint.\n\nYou will need the client ID as well as the username and password of an Angelcam account. For example if your client ID is `DBaJcGbAT2Tbvbrz0fLh1uRmYURprJAQPxwFsgoo` and the Angelcam account is ` user@example.com` with password `mypassword` (this is the password the user would use to login to My Angelcam site; if you were given client secret by Angelcam support, you won't need it at the moment) the request would be:\n\n    curl -X POST https://my.angelcam.com/oauth/token/ -d \"client_id=DBaJcGbAT2Tbvbrz0fLh1uRmYURprJAQPxwFsgoo&scope=user_access&grant_type=password&username=user%40example.com&password=mypassword\"\n\nThe API response should look like\n\n    {\"refresh_token\": \"aFBNWhoLnq7hSTEVII5ELd9g20NjxC\", \"scope\": \"read write\", \"access_token\": \"1CP9xR6tqpRHzaZxWcFAp3GtkFcXEQ\", \"expires_in\": 36000, \"token_type\": \"Bearer\"}\n\n\nVerify the authorization worked\n\n    curl -H \"Authorization: Bearer 1CP9xR6tqpRHzaZxWcFAp3GtkFcXEQ\" -X GET \"https://api.angelcam.com/v1/me/\"\n\nYou should see information about your account\n\n    {\"id\":1234,\"email\":\"user@example.com\",\"first_name\":\"Keyshawn\",\"last_name\":\"Jacobs\",\"phone\":\"+1608494652\"}\n\n\n\n### Obtaining access token using authorization code grant type\n![Authorization code grant sequence diagram](./assets/code_grant.png)\n\n\n  The authorization code grant type should be very familiar for you if you've ever signed\n  into a web app using your Facebook or Google account.\n\n  Authorization code grant type is safer but more difficult to implement and\n  requires the presence of a web browser on the user's device to display the Angelcam account sign-in web page. When users\n  submit the form and confirm that your app will have access to their data, we check their credentials and redirect\n  them back to a URL of your app (`redirect_uri`), which you have specified. This process works in the very same way as when you click a \"Sign-in using Google/Facebook\" button.\n\nYour app sends GET request to `https://api.angelcam.com/oauth/authorize/` with the\n  following query parameters:\n  * `response_type` (required)- authorization grant type with fixed value `code`\n  * `client_id` (required)- your client ID, obtained from Angelcam\n  * `redirect_uri` (required)- URI within your app where users will be\n  redirected after a successful authentication. You\n    must ask Angelcam to whitelist chosen `redirect_uri` for your client ID otherwise you will get a 400 response with\n    \"Mismatching redirect URI\" error.\n  * `scope` (required) - space delimited list of scopes\n  * `state` (optional) - value that serves as\n  [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) token.\n    This parameter is optional but highly recommended. You should store the value of the CSRF token and compare the\n    `state` returned by Angelcam with the value you sent in the original request.\n\nHere is an example of how the resulting request would look like:\n\n    GET https://api.angelcam.com/oauth/authorize/?response_type=code&client_id=XU0aXeP1299oS48KnZmxhqWUR928jsmFKosdrfMS&scope=user_access%20camera_access&state=my_csrf_secret&redirect_uri=http://a948dfc1.ngrok.io\n\n  All of these parameters will be validated by the authorization server. The\n  users will then be asked to log in to approve your app.\n\n  ![Click to see picture of *OAuth screen asking for user\n  approval](./assets/api_oauth_code_authorize_app.png)\n\n\n  If your `redirect_uri` is for example\n  `https://api.mysuperapp.com/oauth/authorized/`, the resulting URL we redirect\n\n  your users to will be:\n\n      https://api.mysuperapp.com/oauth/authorized/?state=my_csrf_secret&code=hTmV8rbgz2TR2DFr1jha2aOTdMKFHY.\n\n  Note these query parameters were appended to redirect URI:\n\n\n  * `state` - the state parameter sent in the original request. You should\n  compare this with the value you previously\n    saved to ensure that the authorization code obtained through requests were made by the same client\n  * `code` - the authorization code that you will exchange at `oauth/token/` for\n  a bearer token\n\nExample of request for exchanging `authorization_code` for `access_token`:\n\n    curl -X POST  https://api.angelcam.com/oauth/token/ -F grant_type=authorization_code -F client_id=XU0aXeP1299oS48KnZmxhqWUR928jsmFKosdrfMS -F client_secret=asdjfghewklcoeru534vj -F code=hTmV8rbgz2TR2DFr1jha2aOTdMKFHY -F redirect_uri=http://a948dfc1.ngrok.io\n\nExample of correct response:\n\n    {\n        \"access_token\": \"<your access token>\",\n        \"expires_in\": 36000,\n        \"token_type\": \"Bearer\",\n        \"scope\": \"user_access\",\n        \"refresh_token\": \"<your refresh token>\"\n    }\n\n\n### Refreshing access token with refresh token\nThe granted access token is valid just for short period of time (by default it is valid for 10 hours). The exact expiration time can be found in `expires_in` attribute.\nA common practice of how to manage expiration is to refresh a token when a `401 Unauthorized` response is returned from any endpoint since all API endpoints requests must be authenticated. Be aware that refresh token itself expires in 30 days. After that new access token using your grant type needs to be obtained.\n\n\n Example of unauthorized response:\n\n     HTTP/1.1 401 Unauthorized\n     Date: Thu, 27 Apr 2017 10:41:58 GMT\n     Content-Type: application/json\n     WWW-Authenticate: Bearer realm=\"api\"\n\n     {\"status\":401,\"title\":\"not_authenticated\",\"detail\":\"Authentication credentials were not provided.\"}\n\nA new `access_token` can be obtained using a `refresh_token` when the current one expires. A `refresh_token` has long expiration time (usually 30 days) and it can be used only once. A new `refresh_token` is issued when the client refreshes the `access_token`, which causes all previous tokens to become invalid.\n\n To refresh the `access_token`, send `POST` request to `oauth/token/`\n endpoint with the following fields:\n\n   * `refresh_token`\n   * `client_id`\n   * `grant_type` with `refresh_token` value\n\nThe server will then generate new `access_token` and `refresh_token`.\n\nExample of request:\n\n    curl -X POST https://api.angelcam.com/oauth/token/ -F grant_type=refresh_token -F client_id=XU0aXeP1299oS48KnZmxhqWUR928jsmFKosdrfMS -F refresh_token=4fjgerkgslgrshg39843fgjdg\n\nExample of correct response:\n\n    {\"access_token\": \"<your new access token>\", \"expires_in\": 36000, \"token_type\": \"Bearer\", \"scope\": \"user_access\", \"refresh_token\": \"<your new refresh token>\"}\n\n A refresh token can be invalidated by the `oauth/token-revoke/` endpoint.\n\n### Available scopes\n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.angelcam.com/oauth/authorize/",
            "tokenUrl": "https://api.angelcam.com/oauth/token/",
            "scopes": {
              "user_access": "Permission to access user information",
              "user_delete": "Permission to delete the current user account",
              "camera_access": "Permission to list cameras and to get details of a specific camera",
              "camera_create": "Permission to create cameras",
              "camera_manage": "Permission to update cameras",
              "camera_delete": "Permission to delete cameras",
              "camera_guest_access": "Permission to access camera guest",
              "camera_guest_manage": "Permission to manage camera guest",
              "public_cameras_access": "Permission to access public cameras",
              "arrow_client_access": "Permission to access Arrow clients",
              "arrow_client_manage": "Permission to manage Arrow clients",
              "event_access": "Permission to access events",
              "recording_access": "Permission to access camera recordings",
              "recording_start_stop": "Permission to start and stop recording on camera",
              "recording_clips_access": "Permission to access recording clips",
              "recording_clips_create": "Permission to create recording clips",
              "recording_clips_share": "Permission to share recording clips",
              "sensor_access": "Permission to list sensors and to get details of a specific sensor",
              "sensor_manage": "Permission to create, update and delete sensors",
              "broadcasting_access": "Permission to see general broadcasting information and access broadcasting streams",
              "broadcasting_start_stop": "Permission to start and stop public broadcasting on camera",
              "client_access": "Permission to list resellers clients and get details of a specific client",
              "client_create": "Permission to create client account",
              "client_manage": "Permission to update clients detail",
              "streams_detect": "Permission to detect camera streams",
              "sites_access": "Permission to access sites",
              "sites_manage": "Permission to create, update and delete sites",
              "services_access": "Permission to access available services",
              "trials_access": "Permission to access available trials",
              "trials_activate": "Permission to activate a trial",
              "active_services_access": "Permission to access active services",
              "active_services_manage": "Permission to manage active services",
              "orders_access": "Permission to access orders",
              "messages_access": "Permission to access RTS messages",
              "messages_manage": "Permission to manage RTS messages"
            }
          },
          "password": {
            "tokenUrl": "https://api.angelcam.com/oauth/token/",
            "scopes": {
              "user_access": "Permission to access user information",
              "user_delete": "Permission to delete the current user account",
              "camera_access": "Permission to list cameras and to get details of a specific camera",
              "camera_create": "Permission to create cameras",
              "camera_manage": "Permission to update cameras",
              "camera_delete": "Permission to delete cameras",
              "camera_guest_access": "Permission to access camera guest",
              "camera_guest_manage": "Permission to manage camera guest",
              "arrow_client_access": "Permission to access Arrow clients",
              "arrow_client_manage": "Permission to manage Arrow clients",
              "event_access": "Permission to access events",
              "recording_access": "Permission to access camera recordings",
              "recording_start_stop": "Permission to start and stop recording on camera",
              "recording_clips_access": "Permission to access recording clips",
              "recording_clips_create": "Permission to create recording clips",
              "recording_clips_share": "Permission to share recording clips",
              "sensor_access": "Permission to list sensors and to get details of a specific sensor",
              "sensor_manage": "Permission to create, update and delete sensors",
              "broadcasting_access": "Permission to see general broadcasting information and access broadcasting streams",
              "broadcasting_start_stop": "Permission to start and stop public broadcasting on camera",
              "client_access": "Permission to list resellers clients and get details of a specific client",
              "client_create": "Permission to create client account",
              "client_manage": "Permission to update clients detail",
              "streams_detect": "Permission to detect camera streams",
              "sites_access": "Permission to access sites",
              "sites_manage": "Permission to create, update and delete sites",
              "services_access": "Permission to access available services",
              "trials_access": "Permission to access available trials",
              "trials_activate": "Permission to activate a trial",
              "active_services_access": "Permission to access active services",
              "active_services_manage": "Permission to manage active services",
              "orders_access": "Permission to access orders",
              "messages_access": "Permission to access RTS messages",
              "messages_manage": "Permission to manage RTS messages",
              "rts_settings_access": "Permission to access RTS settings",
              "rts_settings_manage": "Permissioon to manage RTS settings",
              "rts_arming_manage": "Permission to arm and disarm RTS"
            }
          }
        }
      },
      "PersonalAccessToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "PersonalAccessToken",
        "description": "This authentication method is intended for personal use only. If you're business, integrator or you intend to use Angelcam API for commercial purpose you are obligated to use [OAuth2](/#section/Authentication/OAuth2) authentication method.\n\nPersonal Access Token can be obtained in [MyAngelcam Dashboard](https://my.angelcam.com/dashboard/personal-token/).\n\nThere is no expiration time, but it can be revoked manually.\n\n\nExample of usage:\n\n    $ curl -H \"Authorization: PersonalAccessToken 6245988d57a427aa6cc02769b5559f4f8e09abee\" -X GET \"https://api.angelcam.com/v1/me/\"\n"
      }
    }
  }
}